@startuml tideButtonFlow
skinparam monochrome true
skinparam ParticipantPadding 40


title Client - Button - Ork Flow
note over Client
c = {
  origin = window.origin
  sign = sign(window.origin,vendorPriv)
  server = backendServer
  ork = chosenOrkForModal
  public = vendorPub
}
end note
Client->TideButton: new TideButton(c)
activate TideButton


note over TideButton, Enclave
win = new Window(url: c.ork, name: c.origin,c.sign)
end note
Enclave->TideButton: opener.postMessage("onload")
activate Enclave
TideButton->Enclave: win.postMessage("init",c.server,c.public)
note over Enclave
tide = new Tide(c.server, c.public)
end note

note over Enclave
cvk = tide.register(user,pass);
token = encode({vuid,datetimeCheck},cvk.priv)
end note
Enclave->Enclave:validate(c.sign,c.public)
alt origin == sign && valid ?
 Enclave->TideButton:OK(jwt)
    else
  Enclave->Client:401()
end
deactivate Enclave
TideButton->Server:authenticate(jwt,vuid)
note over Server
user = getUser(vuid)
end note
activate Server
Server->Server: verify(jwt,user.pub)
alt isValid ?
  note over Server
  vendorJwt = encode(vuid,bearer)
  end note
  Server->TideButton:OK(vendorJwt)
  TideButton->TideButton:setHeader(vendorJwt)
  note over TideButton
    headers.auth = vendorJwt
  end note
    else
  Server->Client:401()
  deactivate Server
end
TideButton->Client:OK()
deactivate TideButton



' activate Enclave
'   note over User, Enclave
'      new Window(returnUrl, ClientId)
' end note
' Enclave->Ork:tide.login/register()
' activate Ork
' Ork->Enclave:success(cvk)
' deactivate Ork
'   note over  Enclave
'     token = generateJWT(cvk.private)
' end note
'  alt openerDomainValid ?
'      Enclave->User:postMessage(token)
'  else
'   Enclave->User:postMessage(invalid)
'  end
' deactivate Enclave
'   alt isServerToken ?
'      User->Client:getServerToken(token)
'      activate Client
'      Client->User:OK(generateServerJWT(token))
'       note over User
'   header.authorization = token
'  end note
'       User->Client:authorizedRequest()
'  else
'       note over User
'   header.authorization = token
'  end note
'   User->Client:authorizedRequest()
'  end
' Client->User:OK(privateData)
' deactivate Client

' User->Ork :Register with Tide
'     activate Ork
' note over User, Ork
'     new Window(returnUrl, ClientId)
' end note
' note over Ork
'     cvk = tide.login/register()
' end note
' alt openerDomainValid ?
'     Ork->User:postMessage(cvk)
' else
'  Ork->User:postMessage(invalid)
' end
' deactivate Ork
' User->Client:requestLogin(vuid)
'  activate Client
'  alt UserExists ?
'     note over Client
' User = fetchUser(vuid)
' token = generateJWT(User.vuid)
' eToken = encrypt(token, User.ClientAuth)
' end note
' Client->User:OK(eToken)
' else
' Client->User:NOTFOUND()
' end
' deactivate Client 
' note over User
' token = decrypt(eToken,User.ClientAuth)
' header.authorization = token
' end note
' activate Client
' User->Client: authorizedRequest()
' Client->User:OK()
' deactivate Client 
@enduml