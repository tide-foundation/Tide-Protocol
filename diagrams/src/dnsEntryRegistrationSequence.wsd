@startuml dnsEntryRegistrationSequence
skinparam monochrome true
actor Consumer

title DNS Entry Registration
hnote over Consumer
uid = hash(username)
cmk = random
cmki = secretshare(cmk, orkIdi)
end note

Consumer -> Ork1: registerCMK(uid, cmk1)
activate Ork1
Consumer -> Ork2: registerCMK(uid, cmk2)
activate Ork2
Consumer -> Ork3: registerCMK(uid, cmk3)
activate Ork3

Ork1 -> Simulator: addCMK(orkId1, uid, cmk1)
Ork2 -> Simulator: addCMK(orkId2, uid, cmk2)
Ork3 -> Simulator: addCMK(orkId3, uid, cmk3)

Simulator --> Ork1: OK
Simulator --> Ork2: OK
Simulator --> Ork3: OK

hnote over Ork1, Ork3: signOrki = sign(uid|orkIdi, orkPrvi)

Ork1 --> Consumer: signOrk1
deactivate Ork1
Ork2 --> Consumer: signOrk2
deactivate Ork2
Ork3 --> Consumer: signOrk3
deactivate Ork3

hnote over Consumer
    signUid = sign(uid|cmkPub|orkId1|orkId2|orkId3, cmk)
    orkIds = [orkId1, orkId2, orkId3]
    signOrks = [signOrk1, signOrk2, signOrk3]
end note

Consumer -> Ork3: addDnsEntry(uid, cmkPub, orkIds, signOrks, signUid)
note right: randomly selected Ork
activate Ork3

Ork3 -> Simulator: addDnsEntry(uid, cmkPub, orkIds, signOrks, signUid)
activate Simulator

hnote over Simulator
existDnsEntry = getDns(uid)
orkPubs = getPublics([orkId1, orkId2, orkId3])
isUidVerified = verify(uid|cmkPub|orkId1|orkId2|orkId3, cmkPub)
isOrkiVerified = verify(uid|orkIdi, orkPubi)
end note

alt isUidVerified && isOrkiVerified && !existDnsEntry
    Simulator -> Simulator: storeDns(uid, cmkPub, orkIds, signOrks, signUid)
    Simulator --> Ork3: ok
else
    Simulator --> Ork3: invalid signature
end
deactivate Simulator

Ork3 --> Consumer: response
deactivate Ork3
@enduml