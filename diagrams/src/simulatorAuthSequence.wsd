@startuml simulatorAuthSequence
skinparam monochrome true

title Simulator Auth

Consumer->Ork: tideAction()
 activate Ork
note over Ork
    tx = new Transaction(
    location,
    payload,
    sign(payload,orkSk))
end note
alt isAuthenticated ?
    Ork->Simulator:Post(tx)
    activate Simulator
else
note over Ork
    authReq = new AuthRequest(
    orkId,
    orkPk)
end note
    Ork-->Simulator: register/login(authReq)
    note over Simulator: createAccount()
    Simulator->Ork:ok()
    Ork->Simulator:Post(tx)
end
note over Simulator:verify(payload,orkPk)
alt isValid ?
        note over Simulator
        curTx = getCurrentTx(
        location, 
        index)
        end note
    alt curTx != null ?
        note over Simulator
        curTx.isStale = true
        batchCommit(tx,curTx)
        end note
    else
        note over Simulator: commit(tx)
end
Simulator->Ork:ok(txId)

Ork->Consumer:ok()
else

    Simulator->Ork:unarthorized()
    deactivate Simulator
    Ork->Consumer:error()
deactivate Ork
end


' OLD TOKEN FLOW
' Ork->Simulator: Login(user,pass)
' activate Simulator
' Simulator->Simulator:Check for user
' alt exists && valid ?
'     Simulator-->Ork: GenerateToken()
' else
'     Simulator-->Ork: Unauthorized
' end
' Ork->Ork:Store token
' Ork->Simulator: Request
' note over Simulator,Ork: Header:Authorization token
' alt validToken && validScope ?
'     Simulator-->Ork: Handle Transaction
' else
'     Simulator-->Ork: Unauthorized
' end
' deactivate Simulator

@enduml