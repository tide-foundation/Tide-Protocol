@startuml vendorDAuthGuiFlow
skinparam monochrome true
skinparam ParticipantPadding 30

title Vendor Ork DAuth Window Flow


Client->Enclave: Clicked Login/Register
activate Enclave
  note over Client, Enclave
     new Window(returnUrl, vendorId)
end note
Enclave->Ork:tide.login/register()
activate Ork
Ork->Enclave:success(cvk)
deactivate Ork
  note over  Enclave
    token = generateJWT(cvk.private)
end note
 alt openerDomainValid ?
     Enclave->Client:postMessage(token)
 else
  Enclave->Client:postMessage(invalid)
 end
deactivate Enclave
  alt isServerToken ?
     Client->Vendor:getServerToken(token)
     activate Vendor
     Vendor->Client:OK(generateServerJWT(token))
      note over Client
  header.authorization = token
 end note
      Client->Vendor:authorizedRequest()
 else
      note over Client
  header.authorization = token
 end note
  Client->Vendor:authorizedRequest()
 end
Vendor->Client:OK(privateData)
deactivate Vendor

' Client->Ork :Register with Tide
'     activate Ork
' note over Client, Ork
'     new Window(returnUrl, vendorId)
' end note
' note over Ork
'     cvk = tide.login/register()
' end note
' alt openerDomainValid ?
'     Ork->Client:postMessage(cvk)
' else
'  Ork->Client:postMessage(invalid)
' end
' deactivate Ork
' Client->Vendor:requestLogin(vuid)
'  activate Vendor
'  alt ClientExists ?
'     note over Vendor
' Client = fetchClient(vuid)
' token = generateJWT(Client.vuid)
' eToken = encrypt(token, Client.vendorAuth)
' end note
' Vendor->Client:OK(eToken)
' else
' Vendor->Client:NOTFOUND()
' end
' deactivate Vendor 
' note over Client
' token = decrypt(eToken,Client.vendorAuth)
' header.authorization = token
' end note
' activate Vendor
' Client->Vendor: authorizedRequest()
' Vendor->Client:OK()
' deactivate Vendor 
@enduml