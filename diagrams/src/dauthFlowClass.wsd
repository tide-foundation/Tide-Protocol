@startuml dAuthFlowClass
skinparam monochrome true

title Dauth Flow Class
class "ORKComunicator" as com
class "CVKClient" as cvk
class "CMKClient" as cmk
class "RuleClient" as rule
class "CMKFlow" as cmkFlow
class "CVKFlow" as cvkFlow
class "RuleClientSet" as ruleSet
class "DAuthFlow" as dauth
class "DAuthCmkJwtFlow" as dcmk
class "DAuthJwtFlow" as djwt
class "TideAuthentication" as tide
class "DnsClient" as dns
class "VendorClient" as vendor

com --* cvk
com --* cmk
com --* rule

cmk --* "*" cmkFlow
cvk --* "*" cvkFlow
rule --* "*" ruleSet

cmkFlow --* dauth
cvkFlow --* dauth
ruleSet --* dauth

cmkFlow --* djwt
cvkFlow --* djwt

cvkFlow --* dcmk

djwt -- tide
dcmk -- tide
dauth -- tide
dns -- tide
vendor -- tide

class dns {
  getOrks(uid)
}

class djwt {
  signUp(password, email, threshold)
  logIn(password)
  Recover()
  Reconstruct(textShares, newPass, threshold)
  changePass(pass, newPass, threshold)
}

class dcmk {
  logIn()
}

class tide {
  register(username, password, email)
  registerJwt(username, password, email, serverTime, threshold)
  loginJwt(username, password, serverTime)
  loginUsingCmkJwt(username, cmk, serverTime)
  recover(username)
  reconstruct(username, shares, newPass)
  logout()
  changePassword(pass, newPass)
}

class cmk {
  -communicator
  applyPrism(pass)
  signIn(token)
  signUp(prismi, cmki, prismAuthi, cmkAuthi, email)
  changePass(prismi, prismAuthi, token, withCmk)
  recover()
  confirm()

}

class cvk {
  -communicator
  register(cvkPub, cvki, cvkAuthi, signedKeyId, signature)
  getCvk(key)
  challenge(keyId)
  decrypt(data, keyId, token, sign)
  confirm()
}

class rule {
  -communicator
  getById(ruleId)
  getSet()
  setOrUpdate(rule)
}


class cmkFlow {
  - cmk[]: clients
  cmkAuth: signUp(password, email, threshold, cmk)
  cmkAuth: logIn(password)
  prismAuth: getPrismAuth(pass)
  cmkAuth: Reconstruct(textShares, newPass, threshold)
  changePass(pass, newPass, threshold)
}

class cvkFlow {
  - cvkClient[]: clients
  cvk: signUp(cmkAuth, threshold, signedKeyId, signatures, cvk)
  cvk: getKey(cmkAuth)
  byte[]: decrypt(cipher, private)
}

class ruleSet {
  - ruleClient[]: clients
  getById(ruleId)
  getSet()
  setOrUpdate(rule)
}


class dauth {
  
  signUp(password, email, threshold)
  logIn(password)
  Recover()
  Reconstruct(textShares, newPass, threshold)
  changePass(pass, newPass, threshold)
}

@enduml