@startuml dSignInSequence
skinparam monochrome true

title dSignIn - 3 step process
opt Precondition
note over Consumer
    username = Consumer username
    password [private] = Consumer's password
end note
note over mORKx
    userId = hash(username)
    AuthPRISMi = share(AuthPRISM, orkId) [private]
    CMKAuthi = hmac(pkORKi, AuthProof) [private]
    CMKi = share(skCMK, orkId) [private]
end note
note over vORKx
    VUID = hash(pkVen * skCMK)
    CVKAuthi = hmac(pkORKi, pkVen * skCMK) [private]
    CVKi = share(skCVK, orkId) [private]
end note
note over Vendor
    VUID = hash(pkVen * skCMK)
    pkCVK
end note
end
Consumer->Vendor: GetChallenge()
activate Vendor

Vendor-->Consumer: pkVen, challenge
note over Consumer
    r1 = random [private]
    userId = hash(username)
    gPass = point(hash(password)) [private]
end note
Consumer->Consumer: Resolve mORKs by userId
Consumer->mORKx: Convert( userId , gPass * r1 )
activate mORKx

note over mORKx
    (gPass * r1) ∈ G
    timestamp = now()
    certtime = hmac(timestamp, skORK)
end note 
mORKx-->Consumer: gPass * r1 * AuthPRISMi, timestamp, certtime
deactivate mORKx

note over Consumer
    r2 = random [private]
    gPass * AuthPRISM = ∑(gPass * r1 * AuthPRISMi) * (r1 ^ -1)
    authProof = hash(gPass * AuthPRISM)
    authVRFYi = hmac(pkORKi, authProof)
    VERIFYi = hmac(userId | pkVen * r2 | timestamp | certtime, authVRFYi)
end note
Consumer->mORKx: Authenticate( userId , pkVen * r2 , timestamp , certtime , VERIFYi )
activate mORKx

note over mORKx
    (pkVen * r2) ∈ G ?
    verifyCheck = hmac(userId | pkVen * r2 | timestamp | certtime, CMKAuthi)
end note 
alt verifyCheck == VERIFYi ?
    note over mORKx: Log(AuthOK)
    mORKx-->Consumer: aesEnc(pkVen * r2 * CMKi, CMKAuthi)
else
    note over mORKx: Log(AuthFail)
    mORKx-->Consumer: Some consistent garbage
    deactivate mORKx
    
end
note over Consumer
    aesDec(pkVen * r2 * CMKi, authVRFYi)
    cvkAuth = pkVen * skCMK = ∑(pkVen * r2 * CMKi) * (r2 ^ -1)
    VUID = hash(cvkAuth)
    getVRFYi = hmac(pkORKi, cvkAuth)
    VERIFYi = hmac(VUID | timestamp , getVRFYi)
end note
Consumer->Consumer: Resolve vORKs by VUID
Consumer->vORKx: GetKey( VUID , timestamp , VERIFYi )
activate vORKx

note over vORKx
    if timestamp is not current, reply with a challenge
    verifyCheck = hmac(VUID | timestamp , CVKAuthi)
end note 
alt verifyCheck == VERIFYi ?
    note over vORKx: Log(AuthOK)
    vORKx-->Consumer: aesEnc(CVKi, CVKAuthi)
else
    note over vORKx: Log(AuthFail)
    vORKx-->Consumer: Some consistent garbage
    deactivate vORKx
    
end
note over Consumer
    CVK = ∑(aesDec(CMKi, getVRFYi))
    challengeRes = ECSign(challenge, skCVK)
end note
Consumer->Vendor: SignIn( VUID , challengeRes )
alt verifySig(challengeRes, pkCVK) ?
    note over Vendor: Log(AuthOK)
    Vendor-->Consumer: accessToken
else
    note over Vendor: Log(AuthFail)
    Vendor-->Consumer: REJECT
    deactivate Vendor
    
end

@enduml