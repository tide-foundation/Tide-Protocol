title dSignIn

note over User, Ork1, Ork2, Ork3, Vendor
    User knows: password [private] and username
    Vendor knows: cvkAuth == hash(pubVen * cmk | venId) [private]

    Orks know:
    cmkAuthRi == share(cmkAuthR, orkId) [private]
    cmkAuthi == hmac(OrkId, cmkAuth) [private]
    cmki == share(cmk, orkId) [private]
end note

note over User
    r1 = radom [private]
    userId = hash(username)
    gPass = point(hash(password)) [private]
end note

User->Ork1: GetChallenge(userId, gPass * r1)
User->Ork2: GetChallenge(userId, gPass * r1)
User->Ork3: GetChallenge(userId, gPass * r1)
User->Vendor: GetChallenge()

Ork1-->User: gPass * r1 * cmkAuthR1, token1|time1
Ork2-->User: gPass * r1 * cmkAuthR2, token2|time2
Ork3-->User: gPass * r1 * cmkAuthR3, token3|time3
Vendor-->User: pubVen, token4|time4

note over User
    r2 = radom [private]
    gPass * cmkAuthR = sum(gPass * r1 * cmkAuthRi) * r1 ^ -1
    cmkAuth = hash(gPass * cmkAuthR)
    cmkAuthi = hmac(OrkId, cmkAuth)
    checki = hmac(userId | pubVen * r2 | tokeni | timei, cmkAuthi)
end note

User->Ork1: SignIn(userId, pubVen * r2, token1, time1, check1)
User->Ork2: SignIn(userId, pubVen * r2, token2, time2, check2)
User->Ork3: SignIn(userId, pubVen * r2, token3, time3, check3)

opt if checki is valid with cmkAuthi for userId
    Ork1-->User: aes(pubVen * r2 * cmk1, cmkAuth1)
    Ork2-->User: aes(pubVen * r2 * cmk2, cmkAuth2)
    Ork3-->User: aes(pubVen * r2 * cmk3, cmkAuth3)
end

note over User
    pubVen * cmk = sum(pubVen * r2 * cmki) * r2 ^ -1
    userVendorId = hash(pubVen * cmk | userId)
    cvkAuth = hash(pubVen * cmk | venId)
    check4 = hmac(userVendorId | token4 | time4, cvkAuth)
end note

User->Vendor: SignIn(userVendorId, token4, time4, check4)
opt if check4 is valid with cvkAuth for userVendorId
    Vendor-->User: granted
end
