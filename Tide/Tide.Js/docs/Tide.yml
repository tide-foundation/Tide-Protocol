### YamlMime:UniversalReference
items:
  - uid: tide-js.Tide
    id: tide-js.Tide
    name: Tide
    summary: The main Tide class to initialize.
    fullName: tide-js.Tide
    type: Class
    children:
      - tide-js.Tide.#ctor
      - tide-js.Tide#register
      - tide-js.Tide#login
      - tide-js.Tide#logout
      - tide-js.Tide#encrypt
      - tide-js.Tide#decrypt
      - tide-js.Tide#recover
      - tide-js.Tide#reconstruct
    langs:
      - js
  - id: tide-js.Tide.#ctor
    uid: tide-js.Tide.#ctor
    parent: tide-js.Tide
    name: 'Tide(vendorId, serverUrl)'
    fullName: 'tide-js.Tide.Tide(vendorId, serverUrl)'
    summary: Initialize Tide.
    type: Constructor
    syntax:
      parameters:
        - id: vendorId
          type:
            - String
          description: Your designated VendorId in which you will operate
        - id: serverUrl
          type:
            - String
          description: The endpoint of your backend Tide server
      content: 'new Tide(vendorId, serverUrl)'
    langs:
      - js
  - uid: tide-js.Tide#register
    id: tide-js.Tide#register
    parent: tide-js.Tide
    name: 'register(username, password, email, orkIds)'
    summary: >-
      Create a new Tide account.


      This will generate a new Tide user using the provided username and
      providing a keypaid to manage the account (user-secret).
    fullName: 'tide-js.Tide.register(username, password, email, orkIds)'
    type: Function
    syntax:
      parameters:
        - id: username
          type:
            - String
          description: Plain text username of the new user
        - id: password
          type:
            - String
          description: Plain text password of the new user
        - id: email
          type:
            - String
          description: The recovery email to be used by the user.
        - id: orkIds
          type:
            - Array
          description: >-
            The desired ork nodes to be used for registration. An account can
            only be activated when all ork nodes have confirmed they have stored
            the shard.
      return:
        type:
          - tide-js.AESKey
        description: '- The users keys to be used on the data'
      content: 'function register(username, password, email, orkIds)'
    langs:
      - js
  - uid: tide-js.Tide#login
    id: tide-js.Tide#login
    parent: tide-js.Tide
    name: 'login(username, password)'
    summary: >-
      Login to a previously created Tide account. The account must be fully
      enabled by the vendor before use.


      This will generate a new Tide user using the provided username and
      providing a keypaid to manage the account (user-secret).
    fullName: 'tide-js.Tide.login(username, password)'
    type: Function
    syntax:
      parameters:
        - id: username
          type:
            - String
          description: Plain text username of the user
        - id: password
          type:
            - String
          description: Plain text password of the user
      return:
        type:
          - tide-js.AESKey
        description: '- The users keys to be used on the data'
      content: 'function login(username, password)'
    langs:
      - js
  - uid: tide-js.Tide#logout
    id: tide-js.Tide#logout
    parent: tide-js.Tide
    name: logout()
    summary: Strips all local user data from the browser.
    fullName: tide-js.Tide.logout()
    type: Function
    syntax:
      content: function logout()
    langs:
      - js
  - uid: tide-js.Tide#encrypt
    id: tide-js.Tide#encrypt
    parent: tide-js.Tide
    name: encrypt(msg)
    summary: |-
      Encrypt a string with the logged in user keys.

      This action requires a logged in user.
    fullName: tide-js.Tide.encrypt(msg)
    type: Function
    syntax:
      parameters:
        - id: msg
          type:
            - String
          description: The string you wish to encrypt using the user keys
      return:
        type:
          - String
        description: '- The encrypted payload'
      content: function encrypt(msg)
    langs:
      - js
  - uid: tide-js.Tide#decrypt
    id: tide-js.Tide#decrypt
    parent: tide-js.Tide
    name: decrypt(cipher)
    summary: |-
      Decrypt an encrypted string with the logged in user keys.

      This action requires a logged in user.
    fullName: tide-js.Tide.decrypt(cipher)
    type: Function
    syntax:
      parameters:
        - id: cipher
          type:
            - String
          description: The encrypted string you wish to decrypt using the user keys
      return:
        type:
          - String
        description: '- The plain text message'
      content: function decrypt(cipher)
    langs:
      - js
  - uid: tide-js.Tide#recover
    id: tide-js.Tide#recover
    parent: tide-js.Tide
    name: recover(username)
    summary: >-
      Send a request to the ORK nodes used by the user to email them recovery
      shards. This is step 1 in a 2 step process to recover the user keys.
    fullName: tide-js.Tide.recover(username)
    type: Function
    syntax:
      parameters:
        - id: username
          type:
            - String
          description: The username of the user who wishes to recover
      content: function recover(username)
    langs:
      - js
  - uid: tide-js.Tide#reconstruct
    id: tide-js.Tide#reconstruct
    parent: tide-js.Tide
    name: 'reconstruct(username, shares, newPass)'
    summary: >-
      Login to a previously created Tide account. The account must be fully
      enabled by the vendor before use.


      This will generate a new Tide user using the provided username and
      providing a keypaid to manage the account (user-secret).
    fullName: 'tide-js.Tide.reconstruct(username, shares, newPass)'
    type: Function
    syntax:
      parameters:
        - id: username
          type:
            - String
          description: Plain text username of the user
        - id: shares
          type:
            - Array
          description: An array of shares sent to the users email(s)
        - id: newPass
          type:
            - String
          description: The new password of the user
      content: 'function reconstruct(username, shares, newPass)'
    langs:
      - js
