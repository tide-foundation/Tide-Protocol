using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using Tide.Core;
using Tide.Vendor.Controllers;

namespace Tide.Vendor.Classes
{
    public interface IAuthentication
    {
        /// <summary>
        /// Creates a new user in the vendor DB. Vuid is pulled from the Tide Token.
        /// </summary>
        /// <param name="tideToken">The token generated by tide authentication</param>
        /// <param name="publicKey">The public key attached to the new tide account</param>
        /// <returns>A vendor-generated JWT</returns>
        string Register(string tideToken, string publicKey);

        /// <summary>
        /// Exchanged a tide token for a vendor token in the user exists and is valid
        /// </summary>
        /// <param name="tideToken">The token generated by tide authentication. Must be signed by the correlating private key</param>
        /// <param name="vuid">The vuid of the tide user</param>
        /// <returns>A vendor-generated JWT</returns>
        string Exchange(string tideToken, string vuid);

        /// <summary>
        /// Fetch a user using the vendor JWT
        /// </summary>
        /// <param name="stringToken">The vendor generated JWT</param>
        /// <returns>A vendor user account</returns>
        VendorUser GetUser(string stringToken);
    }
}
