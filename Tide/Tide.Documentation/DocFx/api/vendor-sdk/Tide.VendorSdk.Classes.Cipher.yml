### YamlMime:ManagedReference
items:
- uid: Tide.VendorSdk.Classes.Cipher
  commentId: T:Tide.VendorSdk.Classes.Cipher
  id: Cipher
  parent: Tide.VendorSdk.Classes
  children:
  - Tide.VendorSdk.Classes.Cipher.Asymmetric(System.Byte[])
  - Tide.VendorSdk.Classes.Cipher.CheckAsymmetric(System.Byte[],Tide.Encryption.Ecc.C25519Key)
  - Tide.VendorSdk.Classes.Cipher.CipherFromAsymmetric(System.Byte[])
  - Tide.VendorSdk.Classes.Cipher.Decrypt(System.Byte[],Tide.Encryption.Ecc.C25519Key)
  - Tide.VendorSdk.Classes.Cipher.Encrypt(System.Byte[],System.UInt64,Tide.Encryption.Ecc.C25519Key)
  - Tide.VendorSdk.Classes.Cipher.Encrypt(System.String,System.UInt64,Tide.Encryption.Ecc.C25519Key)
  - Tide.VendorSdk.Classes.Cipher.GetCipherC1(System.Byte[])
  - Tide.VendorSdk.Classes.Cipher.GetTag(System.Byte[])
  - Tide.VendorSdk.Classes.Cipher.Pad32(System.Byte[])
  - Tide.VendorSdk.Classes.Cipher.Symmetric(System.Byte[])
  - Tide.VendorSdk.Classes.Cipher.UnPad32(System.Byte[])
  langs:
  - csharp
  - vb
  name: Cipher
  nameWithType: Cipher
  fullName: Tide.VendorSdk.Classes.Cipher
  type: Class
  source:
    remote:
      path: Tide/Tide.VendorSdk/Classes/Cipher.cs
      branch: master
      repo: https://github.com/tide-foundation/Tide-Protocol.git
    id: Cipher
    path: ../../Tide.VendorSdk/Classes/Cipher.cs
    startLine: 9
  assemblies:
  - Tide.VendorSdk
  namespace: Tide.VendorSdk.Classes
  syntax:
    content: public class Cipher
    content.vb: Public Class Cipher
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Tide.VendorSdk.Classes.Cipher.Encrypt(System.String,System.UInt64,Tide.Encryption.Ecc.C25519Key)
  commentId: M:Tide.VendorSdk.Classes.Cipher.Encrypt(System.String,System.UInt64,Tide.Encryption.Ecc.C25519Key)
  id: Encrypt(System.String,System.UInt64,Tide.Encryption.Ecc.C25519Key)
  parent: Tide.VendorSdk.Classes.Cipher
  langs:
  - csharp
  - vb
  name: Encrypt(String, UInt64, C25519Key)
  nameWithType: Cipher.Encrypt(String, UInt64, C25519Key)
  fullName: Tide.VendorSdk.Classes.Cipher.Encrypt(System.String, System.UInt64, Tide.Encryption.Ecc.C25519Key)
  type: Method
  source:
    remote:
      path: Tide/Tide.VendorSdk/Classes/Cipher.cs
      branch: master
      repo: https://github.com/tide-foundation/Tide-Protocol.git
    id: Encrypt
    path: ../../Tide.VendorSdk/Classes/Cipher.cs
    startLine: 15
  assemblies:
  - Tide.VendorSdk
  namespace: Tide.VendorSdk.Classes
  syntax:
    content: public static byte[] Encrypt(string buffer, ulong tag, C25519Key key)
    parameters:
    - id: buffer
      type: System.String
    - id: tag
      type: System.UInt64
    - id: key
      type: Tide.Encryption.Ecc.C25519Key
    return:
      type: System.Byte[]
    content.vb: Public Shared Function Encrypt(buffer As String, tag As ULong, key As C25519Key) As Byte()
  overload: Tide.VendorSdk.Classes.Cipher.Encrypt*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Tide.VendorSdk.Classes.Cipher.Encrypt(System.Byte[],System.UInt64,Tide.Encryption.Ecc.C25519Key)
  commentId: M:Tide.VendorSdk.Classes.Cipher.Encrypt(System.Byte[],System.UInt64,Tide.Encryption.Ecc.C25519Key)
  id: Encrypt(System.Byte[],System.UInt64,Tide.Encryption.Ecc.C25519Key)
  parent: Tide.VendorSdk.Classes.Cipher
  langs:
  - csharp
  - vb
  name: Encrypt(Byte[], UInt64, C25519Key)
  nameWithType: Cipher.Encrypt(Byte[], UInt64, C25519Key)
  fullName: Tide.VendorSdk.Classes.Cipher.Encrypt(System.Byte[], System.UInt64, Tide.Encryption.Ecc.C25519Key)
  type: Method
  source:
    remote:
      path: Tide/Tide.VendorSdk/Classes/Cipher.cs
      branch: master
      repo: https://github.com/tide-foundation/Tide-Protocol.git
    id: Encrypt
    path: ../../Tide.VendorSdk/Classes/Cipher.cs
    startLine: 18
  assemblies:
  - Tide.VendorSdk
  namespace: Tide.VendorSdk.Classes
  syntax:
    content: public static byte[] Encrypt(byte[] buffer, ulong tag, C25519Key key)
    parameters:
    - id: buffer
      type: System.Byte[]
    - id: tag
      type: System.UInt64
    - id: key
      type: Tide.Encryption.Ecc.C25519Key
    return:
      type: System.Byte[]
    content.vb: Public Shared Function Encrypt(buffer As Byte(), tag As ULong, key As C25519Key) As Byte()
  overload: Tide.VendorSdk.Classes.Cipher.Encrypt*
  nameWithType.vb: Cipher.Encrypt(Byte(), UInt64, C25519Key)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Tide.VendorSdk.Classes.Cipher.Encrypt(System.Byte(), System.UInt64, Tide.Encryption.Ecc.C25519Key)
  name.vb: Encrypt(Byte(), UInt64, C25519Key)
- uid: Tide.VendorSdk.Classes.Cipher.Decrypt(System.Byte[],Tide.Encryption.Ecc.C25519Key)
  commentId: M:Tide.VendorSdk.Classes.Cipher.Decrypt(System.Byte[],Tide.Encryption.Ecc.C25519Key)
  id: Decrypt(System.Byte[],Tide.Encryption.Ecc.C25519Key)
  parent: Tide.VendorSdk.Classes.Cipher
  langs:
  - csharp
  - vb
  name: Decrypt(Byte[], C25519Key)
  nameWithType: Cipher.Decrypt(Byte[], C25519Key)
  fullName: Tide.VendorSdk.Classes.Cipher.Decrypt(System.Byte[], Tide.Encryption.Ecc.C25519Key)
  type: Method
  source:
    remote:
      path: Tide/Tide.VendorSdk/Classes/Cipher.cs
      branch: master
      repo: https://github.com/tide-foundation/Tide-Protocol.git
    id: Decrypt
    path: ../../Tide.VendorSdk/Classes/Cipher.cs
    startLine: 61
  assemblies:
  - Tide.VendorSdk
  namespace: Tide.VendorSdk.Classes
  syntax:
    content: public static byte[] Decrypt(byte[] data, C25519Key key)
    parameters:
    - id: data
      type: System.Byte[]
    - id: key
      type: Tide.Encryption.Ecc.C25519Key
    return:
      type: System.Byte[]
    content.vb: Public Shared Function Decrypt(data As Byte(), key As C25519Key) As Byte()
  overload: Tide.VendorSdk.Classes.Cipher.Decrypt*
  nameWithType.vb: Cipher.Decrypt(Byte(), C25519Key)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Tide.VendorSdk.Classes.Cipher.Decrypt(System.Byte(), Tide.Encryption.Ecc.C25519Key)
  name.vb: Decrypt(Byte(), C25519Key)
- uid: Tide.VendorSdk.Classes.Cipher.Asymmetric(System.Byte[])
  commentId: M:Tide.VendorSdk.Classes.Cipher.Asymmetric(System.Byte[])
  id: Asymmetric(System.Byte[])
  parent: Tide.VendorSdk.Classes.Cipher
  langs:
  - csharp
  - vb
  name: Asymmetric(Byte[])
  nameWithType: Cipher.Asymmetric(Byte[])
  fullName: Tide.VendorSdk.Classes.Cipher.Asymmetric(System.Byte[])
  type: Method
  source:
    remote:
      path: Tide/Tide.VendorSdk/Classes/Cipher.cs
      branch: master
      repo: https://github.com/tide-foundation/Tide-Protocol.git
    id: Asymmetric
    path: ../../Tide.VendorSdk/Classes/Cipher.cs
    startLine: 85
  assemblies:
  - Tide.VendorSdk
  namespace: Tide.VendorSdk.Classes
  syntax:
    content: public static byte[] Asymmetric(byte[] data)
    parameters:
    - id: data
      type: System.Byte[]
    return:
      type: System.Byte[]
    content.vb: Public Shared Function Asymmetric(data As Byte()) As Byte()
  overload: Tide.VendorSdk.Classes.Cipher.Asymmetric*
  nameWithType.vb: Cipher.Asymmetric(Byte())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Tide.VendorSdk.Classes.Cipher.Asymmetric(System.Byte())
  name.vb: Asymmetric(Byte())
- uid: Tide.VendorSdk.Classes.Cipher.Symmetric(System.Byte[])
  commentId: M:Tide.VendorSdk.Classes.Cipher.Symmetric(System.Byte[])
  id: Symmetric(System.Byte[])
  parent: Tide.VendorSdk.Classes.Cipher
  langs:
  - csharp
  - vb
  name: Symmetric(Byte[])
  nameWithType: Cipher.Symmetric(Byte[])
  fullName: Tide.VendorSdk.Classes.Cipher.Symmetric(System.Byte[])
  type: Method
  source:
    remote:
      path: Tide/Tide.VendorSdk/Classes/Cipher.cs
      branch: master
      repo: https://github.com/tide-foundation/Tide-Protocol.git
    id: Symmetric
    path: ../../Tide.VendorSdk/Classes/Cipher.cs
    startLine: 91
  assemblies:
  - Tide.VendorSdk
  namespace: Tide.VendorSdk.Classes
  syntax:
    content: public static byte[] Symmetric(byte[] data)
    parameters:
    - id: data
      type: System.Byte[]
    return:
      type: System.Byte[]
    content.vb: Public Shared Function Symmetric(data As Byte()) As Byte()
  overload: Tide.VendorSdk.Classes.Cipher.Symmetric*
  nameWithType.vb: Cipher.Symmetric(Byte())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Tide.VendorSdk.Classes.Cipher.Symmetric(System.Byte())
  name.vb: Symmetric(Byte())
- uid: Tide.VendorSdk.Classes.Cipher.CipherFromAsymmetric(System.Byte[])
  commentId: M:Tide.VendorSdk.Classes.Cipher.CipherFromAsymmetric(System.Byte[])
  id: CipherFromAsymmetric(System.Byte[])
  parent: Tide.VendorSdk.Classes.Cipher
  langs:
  - csharp
  - vb
  name: CipherFromAsymmetric(Byte[])
  nameWithType: Cipher.CipherFromAsymmetric(Byte[])
  fullName: Tide.VendorSdk.Classes.Cipher.CipherFromAsymmetric(System.Byte[])
  type: Method
  source:
    remote:
      path: Tide/Tide.VendorSdk/Classes/Cipher.cs
      branch: master
      repo: https://github.com/tide-foundation/Tide-Protocol.git
    id: CipherFromAsymmetric
    path: ../../Tide.VendorSdk/Classes/Cipher.cs
    startLine: 99
  assemblies:
  - Tide.VendorSdk
  namespace: Tide.VendorSdk.Classes
  syntax:
    content: public static C25519Cipher CipherFromAsymmetric(byte[] data)
    parameters:
    - id: data
      type: System.Byte[]
    return:
      type: Tide.Encryption.Ecc.C25519Cipher
    content.vb: Public Shared Function CipherFromAsymmetric(data As Byte()) As C25519Cipher
  overload: Tide.VendorSdk.Classes.Cipher.CipherFromAsymmetric*
  nameWithType.vb: Cipher.CipherFromAsymmetric(Byte())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Tide.VendorSdk.Classes.Cipher.CipherFromAsymmetric(System.Byte())
  name.vb: CipherFromAsymmetric(Byte())
- uid: Tide.VendorSdk.Classes.Cipher.CheckAsymmetric(System.Byte[],Tide.Encryption.Ecc.C25519Key)
  commentId: M:Tide.VendorSdk.Classes.Cipher.CheckAsymmetric(System.Byte[],Tide.Encryption.Ecc.C25519Key)
  id: CheckAsymmetric(System.Byte[],Tide.Encryption.Ecc.C25519Key)
  parent: Tide.VendorSdk.Classes.Cipher
  langs:
  - csharp
  - vb
  name: CheckAsymmetric(Byte[], C25519Key)
  nameWithType: Cipher.CheckAsymmetric(Byte[], C25519Key)
  fullName: Tide.VendorSdk.Classes.Cipher.CheckAsymmetric(System.Byte[], Tide.Encryption.Ecc.C25519Key)
  type: Method
  source:
    remote:
      path: Tide/Tide.VendorSdk/Classes/Cipher.cs
      branch: master
      repo: https://github.com/tide-foundation/Tide-Protocol.git
    id: CheckAsymmetric
    path: ../../Tide.VendorSdk/Classes/Cipher.cs
    startLine: 104
  assemblies:
  - Tide.VendorSdk
  namespace: Tide.VendorSdk.Classes
  syntax:
    content: public static bool CheckAsymmetric(byte[] data, C25519Key key)
    parameters:
    - id: data
      type: System.Byte[]
    - id: key
      type: Tide.Encryption.Ecc.C25519Key
    return:
      type: System.Boolean
    content.vb: Public Shared Function CheckAsymmetric(data As Byte(), key As C25519Key) As Boolean
  overload: Tide.VendorSdk.Classes.Cipher.CheckAsymmetric*
  nameWithType.vb: Cipher.CheckAsymmetric(Byte(), C25519Key)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Tide.VendorSdk.Classes.Cipher.CheckAsymmetric(System.Byte(), Tide.Encryption.Ecc.C25519Key)
  name.vb: CheckAsymmetric(Byte(), C25519Key)
- uid: Tide.VendorSdk.Classes.Cipher.Pad32(System.Byte[])
  commentId: M:Tide.VendorSdk.Classes.Cipher.Pad32(System.Byte[])
  id: Pad32(System.Byte[])
  parent: Tide.VendorSdk.Classes.Cipher
  langs:
  - csharp
  - vb
  name: Pad32(Byte[])
  nameWithType: Cipher.Pad32(Byte[])
  fullName: Tide.VendorSdk.Classes.Cipher.Pad32(System.Byte[])
  type: Method
  source:
    remote:
      path: Tide/Tide.VendorSdk/Classes/Cipher.cs
      branch: master
      repo: https://github.com/tide-foundation/Tide-Protocol.git
    id: Pad32
    path: ../../Tide.VendorSdk/Classes/Cipher.cs
    startLine: 128
  assemblies:
  - Tide.VendorSdk
  namespace: Tide.VendorSdk.Classes
  syntax:
    content: public static byte[] Pad32(byte[] data)
    parameters:
    - id: data
      type: System.Byte[]
    return:
      type: System.Byte[]
    content.vb: Public Shared Function Pad32(data As Byte()) As Byte()
  overload: Tide.VendorSdk.Classes.Cipher.Pad32*
  nameWithType.vb: Cipher.Pad32(Byte())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Tide.VendorSdk.Classes.Cipher.Pad32(System.Byte())
  name.vb: Pad32(Byte())
- uid: Tide.VendorSdk.Classes.Cipher.UnPad32(System.Byte[])
  commentId: M:Tide.VendorSdk.Classes.Cipher.UnPad32(System.Byte[])
  id: UnPad32(System.Byte[])
  parent: Tide.VendorSdk.Classes.Cipher
  langs:
  - csharp
  - vb
  name: UnPad32(Byte[])
  nameWithType: Cipher.UnPad32(Byte[])
  fullName: Tide.VendorSdk.Classes.Cipher.UnPad32(System.Byte[])
  type: Method
  source:
    remote:
      path: Tide/Tide.VendorSdk/Classes/Cipher.cs
      branch: master
      repo: https://github.com/tide-foundation/Tide-Protocol.git
    id: UnPad32
    path: ../../Tide.VendorSdk/Classes/Cipher.cs
    startLine: 138
  assemblies:
  - Tide.VendorSdk
  namespace: Tide.VendorSdk.Classes
  syntax:
    content: public static byte[] UnPad32(byte[] data)
    parameters:
    - id: data
      type: System.Byte[]
    return:
      type: System.Byte[]
    content.vb: Public Shared Function UnPad32(data As Byte()) As Byte()
  overload: Tide.VendorSdk.Classes.Cipher.UnPad32*
  nameWithType.vb: Cipher.UnPad32(Byte())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Tide.VendorSdk.Classes.Cipher.UnPad32(System.Byte())
  name.vb: UnPad32(Byte())
- uid: Tide.VendorSdk.Classes.Cipher.GetTag(System.Byte[])
  commentId: M:Tide.VendorSdk.Classes.Cipher.GetTag(System.Byte[])
  id: GetTag(System.Byte[])
  parent: Tide.VendorSdk.Classes.Cipher
  langs:
  - csharp
  - vb
  name: GetTag(Byte[])
  nameWithType: Cipher.GetTag(Byte[])
  fullName: Tide.VendorSdk.Classes.Cipher.GetTag(System.Byte[])
  type: Method
  source:
    remote:
      path: Tide/Tide.VendorSdk/Classes/Cipher.cs
      branch: master
      repo: https://github.com/tide-foundation/Tide-Protocol.git
    id: GetTag
    path: ../../Tide.VendorSdk/Classes/Cipher.cs
    startLine: 151
  assemblies:
  - Tide.VendorSdk
  namespace: Tide.VendorSdk.Classes
  syntax:
    content: public static ulong GetTag(byte[] data)
    parameters:
    - id: data
      type: System.Byte[]
    return:
      type: System.UInt64
    content.vb: Public Shared Function GetTag(data As Byte()) As ULong
  overload: Tide.VendorSdk.Classes.Cipher.GetTag*
  nameWithType.vb: Cipher.GetTag(Byte())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Tide.VendorSdk.Classes.Cipher.GetTag(System.Byte())
  name.vb: GetTag(Byte())
- uid: Tide.VendorSdk.Classes.Cipher.GetCipherC1(System.Byte[])
  commentId: M:Tide.VendorSdk.Classes.Cipher.GetCipherC1(System.Byte[])
  id: GetCipherC1(System.Byte[])
  parent: Tide.VendorSdk.Classes.Cipher
  langs:
  - csharp
  - vb
  name: GetCipherC1(Byte[])
  nameWithType: Cipher.GetCipherC1(Byte[])
  fullName: Tide.VendorSdk.Classes.Cipher.GetCipherC1(System.Byte[])
  type: Method
  source:
    remote:
      path: Tide/Tide.VendorSdk/Classes/Cipher.cs
      branch: master
      repo: https://github.com/tide-foundation/Tide-Protocol.git
    id: GetCipherC1
    path: ../../Tide.VendorSdk/Classes/Cipher.cs
    startLine: 157
  assemblies:
  - Tide.VendorSdk
  namespace: Tide.VendorSdk.Classes
  syntax:
    content: public static C25519Point GetCipherC1(byte[] dataBuffer)
    parameters:
    - id: dataBuffer
      type: System.Byte[]
    return:
      type: Tide.Encryption.Ecc.C25519Point
    content.vb: Public Shared Function GetCipherC1(dataBuffer As Byte()) As C25519Point
  overload: Tide.VendorSdk.Classes.Cipher.GetCipherC1*
  nameWithType.vb: Cipher.GetCipherC1(Byte())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Tide.VendorSdk.Classes.Cipher.GetCipherC1(System.Byte())
  name.vb: GetCipherC1(Byte())
references:
- uid: Tide.VendorSdk.Classes
  commentId: N:Tide.VendorSdk.Classes
  name: Tide.VendorSdk.Classes
  nameWithType: Tide.VendorSdk.Classes
  fullName: Tide.VendorSdk.Classes
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Tide.VendorSdk.Classes.Cipher.Encrypt*
  commentId: Overload:Tide.VendorSdk.Classes.Cipher.Encrypt
  name: Encrypt
  nameWithType: Cipher.Encrypt
  fullName: Tide.VendorSdk.Classes.Cipher.Encrypt
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.UInt64
  commentId: T:System.UInt64
  parent: System
  isExternal: true
  name: UInt64
  nameWithType: UInt64
  fullName: System.UInt64
- uid: Tide.Encryption.Ecc.C25519Key
  commentId: T:Tide.Encryption.Ecc.C25519Key
  parent: Tide.Encryption.Ecc
  isExternal: true
  name: C25519Key
  nameWithType: C25519Key
  fullName: Tide.Encryption.Ecc.C25519Key
- uid: System.Byte[]
  isExternal: true
  name: Byte[]
  nameWithType: Byte[]
  fullName: System.Byte[]
  nameWithType.vb: Byte()
  fullName.vb: System.Byte()
  name.vb: Byte()
  spec.csharp:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: Tide.Encryption.Ecc
  commentId: N:Tide.Encryption.Ecc
  isExternal: true
  name: Tide.Encryption.Ecc
  nameWithType: Tide.Encryption.Ecc
  fullName: Tide.Encryption.Ecc
- uid: Tide.VendorSdk.Classes.Cipher.Decrypt*
  commentId: Overload:Tide.VendorSdk.Classes.Cipher.Decrypt
  name: Decrypt
  nameWithType: Cipher.Decrypt
  fullName: Tide.VendorSdk.Classes.Cipher.Decrypt
- uid: Tide.VendorSdk.Classes.Cipher.Asymmetric*
  commentId: Overload:Tide.VendorSdk.Classes.Cipher.Asymmetric
  name: Asymmetric
  nameWithType: Cipher.Asymmetric
  fullName: Tide.VendorSdk.Classes.Cipher.Asymmetric
- uid: Tide.VendorSdk.Classes.Cipher.Symmetric*
  commentId: Overload:Tide.VendorSdk.Classes.Cipher.Symmetric
  name: Symmetric
  nameWithType: Cipher.Symmetric
  fullName: Tide.VendorSdk.Classes.Cipher.Symmetric
- uid: Tide.VendorSdk.Classes.Cipher.CipherFromAsymmetric*
  commentId: Overload:Tide.VendorSdk.Classes.Cipher.CipherFromAsymmetric
  name: CipherFromAsymmetric
  nameWithType: Cipher.CipherFromAsymmetric
  fullName: Tide.VendorSdk.Classes.Cipher.CipherFromAsymmetric
- uid: Tide.Encryption.Ecc.C25519Cipher
  commentId: T:Tide.Encryption.Ecc.C25519Cipher
  parent: Tide.Encryption.Ecc
  isExternal: true
  name: C25519Cipher
  nameWithType: C25519Cipher
  fullName: Tide.Encryption.Ecc.C25519Cipher
- uid: Tide.VendorSdk.Classes.Cipher.CheckAsymmetric*
  commentId: Overload:Tide.VendorSdk.Classes.Cipher.CheckAsymmetric
  name: CheckAsymmetric
  nameWithType: Cipher.CheckAsymmetric
  fullName: Tide.VendorSdk.Classes.Cipher.CheckAsymmetric
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: Tide.VendorSdk.Classes.Cipher.Pad32*
  commentId: Overload:Tide.VendorSdk.Classes.Cipher.Pad32
  name: Pad32
  nameWithType: Cipher.Pad32
  fullName: Tide.VendorSdk.Classes.Cipher.Pad32
- uid: Tide.VendorSdk.Classes.Cipher.UnPad32*
  commentId: Overload:Tide.VendorSdk.Classes.Cipher.UnPad32
  name: UnPad32
  nameWithType: Cipher.UnPad32
  fullName: Tide.VendorSdk.Classes.Cipher.UnPad32
- uid: Tide.VendorSdk.Classes.Cipher.GetTag*
  commentId: Overload:Tide.VendorSdk.Classes.Cipher.GetTag
  name: GetTag
  nameWithType: Cipher.GetTag
  fullName: Tide.VendorSdk.Classes.Cipher.GetTag
- uid: Tide.VendorSdk.Classes.Cipher.GetCipherC1*
  commentId: Overload:Tide.VendorSdk.Classes.Cipher.GetCipherC1
  name: GetCipherC1
  nameWithType: Cipher.GetCipherC1
  fullName: Tide.VendorSdk.Classes.Cipher.GetCipherC1
- uid: Tide.Encryption.Ecc.C25519Point
  commentId: T:Tide.Encryption.Ecc.C25519Point
  parent: Tide.Encryption.Ecc
  isExternal: true
  name: C25519Point
  nameWithType: C25519Point
  fullName: Tide.Encryption.Ecc.C25519Point
