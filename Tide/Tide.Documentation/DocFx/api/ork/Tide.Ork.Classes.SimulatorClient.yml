### YamlMime:ManagedReference
items:
- uid: Tide.Ork.Classes.SimulatorClient
  commentId: T:Tide.Ork.Classes.SimulatorClient
  id: SimulatorClient
  parent: Tide.Ork.Classes
  children:
  - Tide.Ork.Classes.SimulatorClient.#ctor(System.String,System.String,Tide.Encryption.Ecc.C25519Key)
  - Tide.Ork.Classes.SimulatorClient.Delete(System.String,System.String,System.String,System.String)
  - Tide.Ork.Classes.SimulatorClient.Get(System.String,System.String,System.String)
  - Tide.Ork.Classes.SimulatorClient.Get(System.String,System.String,System.String,System.String)
  - Tide.Ork.Classes.SimulatorClient.Post(System.String,System.String,System.String,System.String,System.Object)
  langs:
  - csharp
  - vb
  name: SimulatorClient
  nameWithType: SimulatorClient
  fullName: Tide.Ork.Classes.SimulatorClient
  type: Class
  source:
    remote:
      path: Tide/Tide.Ork/Classes/SimulatorClient.cs
      branch: master
      repo: https://github.com/tide-foundation/Tide-Protocol.git
    id: SimulatorClient
    path: ../../Tide.Ork/Classes/SimulatorClient.cs
    startLine: 16
  assemblies:
  - Tide.Ork
  namespace: Tide.Ork.Classes
  syntax:
    content: public class SimulatorClient
    content.vb: Public Class SimulatorClient
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Tide.Ork.Classes.SimulatorClient.#ctor(System.String,System.String,Tide.Encryption.Ecc.C25519Key)
  commentId: M:Tide.Ork.Classes.SimulatorClient.#ctor(System.String,System.String,Tide.Encryption.Ecc.C25519Key)
  id: '#ctor(System.String,System.String,Tide.Encryption.Ecc.C25519Key)'
  parent: Tide.Ork.Classes.SimulatorClient
  langs:
  - csharp
  - vb
  name: SimulatorClient(String, String, C25519Key)
  nameWithType: SimulatorClient.SimulatorClient(String, String, C25519Key)
  fullName: Tide.Ork.Classes.SimulatorClient.SimulatorClient(System.String, System.String, Tide.Encryption.Ecc.C25519Key)
  type: Constructor
  source:
    remote:
      path: Tide/Tide.Ork/Classes/SimulatorClient.cs
      branch: master
      repo: https://github.com/tide-foundation/Tide-Protocol.git
    id: .ctor
    path: ../../Tide.Ork/Classes/SimulatorClient.cs
    startLine: 22
  assemblies:
  - Tide.Ork
  namespace: Tide.Ork.Classes
  syntax:
    content: public SimulatorClient(string url, string orkId, C25519Key privateKey)
    parameters:
    - id: url
      type: System.String
    - id: orkId
      type: System.String
    - id: privateKey
      type: Tide.Encryption.Ecc.C25519Key
    content.vb: Public Sub New(url As String, orkId As String, privateKey As C25519Key)
  overload: Tide.Ork.Classes.SimulatorClient.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Tide.Ork.Classes.SimulatorClient.Post(System.String,System.String,System.String,System.String,System.Object)
  commentId: M:Tide.Ork.Classes.SimulatorClient.Post(System.String,System.String,System.String,System.String,System.Object)
  id: Post(System.String,System.String,System.String,System.String,System.Object)
  parent: Tide.Ork.Classes.SimulatorClient
  langs:
  - csharp
  - vb
  name: Post(String, String, String, String, Object)
  nameWithType: SimulatorClient.Post(String, String, String, String, Object)
  fullName: Tide.Ork.Classes.SimulatorClient.Post(System.String, System.String, System.String, System.String, System.Object)
  type: Method
  source:
    remote:
      path: Tide/Tide.Ork/Classes/SimulatorClient.cs
      branch: master
      repo: https://github.com/tide-foundation/Tide-Protocol.git
    id: Post
    path: ../../Tide.Ork/Classes/SimulatorClient.cs
    startLine: 40
  assemblies:
  - Tide.Ork
  namespace: Tide.Ork.Classes
  syntax:
    content: public Task<bool> Post(string contract, string table, string scope, string index, object payload)
    parameters:
    - id: contract
      type: System.String
    - id: table
      type: System.String
    - id: scope
      type: System.String
    - id: index
      type: System.String
    - id: payload
      type: System.Object
    return:
      type: System.Threading.Tasks.Task{System.Boolean}
    content.vb: Public Function Post(contract As String, table As String, scope As String, index As String, payload As Object) As Task(Of Boolean)
  overload: Tide.Ork.Classes.SimulatorClient.Post*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Tide.Ork.Classes.SimulatorClient.Get(System.String,System.String,System.String,System.String)
  commentId: M:Tide.Ork.Classes.SimulatorClient.Get(System.String,System.String,System.String,System.String)
  id: Get(System.String,System.String,System.String,System.String)
  parent: Tide.Ork.Classes.SimulatorClient
  langs:
  - csharp
  - vb
  name: Get(String, String, String, String)
  nameWithType: SimulatorClient.Get(String, String, String, String)
  fullName: Tide.Ork.Classes.SimulatorClient.Get(System.String, System.String, System.String, System.String)
  type: Method
  source:
    remote:
      path: Tide/Tide.Ork/Classes/SimulatorClient.cs
      branch: master
      repo: https://github.com/tide-foundation/Tide-Protocol.git
    id: Get
    path: ../../Tide.Ork/Classes/SimulatorClient.cs
    startLine: 53
  assemblies:
  - Tide.Ork
  namespace: Tide.Ork.Classes
  syntax:
    content: public Task<string> Get(string contract, string table, string scope, string index)
    parameters:
    - id: contract
      type: System.String
    - id: table
      type: System.String
    - id: scope
      type: System.String
    - id: index
      type: System.String
    return:
      type: System.Threading.Tasks.Task{System.String}
    content.vb: Public Function Get(contract As String, table As String, scope As String, index As String) As Task(Of String)
  overload: Tide.Ork.Classes.SimulatorClient.Get*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Tide.Ork.Classes.SimulatorClient.Get(System.String,System.String,System.String)
  commentId: M:Tide.Ork.Classes.SimulatorClient.Get(System.String,System.String,System.String)
  id: Get(System.String,System.String,System.String)
  parent: Tide.Ork.Classes.SimulatorClient
  langs:
  - csharp
  - vb
  name: Get(String, String, String)
  nameWithType: SimulatorClient.Get(String, String, String)
  fullName: Tide.Ork.Classes.SimulatorClient.Get(System.String, System.String, System.String)
  type: Method
  source:
    remote:
      path: Tide/Tide.Ork/Classes/SimulatorClient.cs
      branch: master
      repo: https://github.com/tide-foundation/Tide-Protocol.git
    id: Get
    path: ../../Tide.Ork/Classes/SimulatorClient.cs
    startLine: 63
  assemblies:
  - Tide.Ork
  namespace: Tide.Ork.Classes
  syntax:
    content: public Task<List<string>> Get(string contract, string table, string scope)
    parameters:
    - id: contract
      type: System.String
    - id: table
      type: System.String
    - id: scope
      type: System.String
    return:
      type: System.Threading.Tasks.Task{System.Collections.Generic.List{System.String}}
    content.vb: Public Function Get(contract As String, table As String, scope As String) As Task(Of List(Of String))
  overload: Tide.Ork.Classes.SimulatorClient.Get*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Tide.Ork.Classes.SimulatorClient.Delete(System.String,System.String,System.String,System.String)
  commentId: M:Tide.Ork.Classes.SimulatorClient.Delete(System.String,System.String,System.String,System.String)
  id: Delete(System.String,System.String,System.String,System.String)
  parent: Tide.Ork.Classes.SimulatorClient
  langs:
  - csharp
  - vb
  name: Delete(String, String, String, String)
  nameWithType: SimulatorClient.Delete(String, String, String, String)
  fullName: Tide.Ork.Classes.SimulatorClient.Delete(System.String, System.String, System.String, System.String)
  type: Method
  source:
    remote:
      path: Tide/Tide.Ork/Classes/SimulatorClient.cs
      branch: master
      repo: https://github.com/tide-foundation/Tide-Protocol.git
    id: Delete
    path: ../../Tide.Ork/Classes/SimulatorClient.cs
    startLine: 75
  assemblies:
  - Tide.Ork
  namespace: Tide.Ork.Classes
  syntax:
    content: public Task<bool> Delete(string contract, string table, string scope, string index)
    parameters:
    - id: contract
      type: System.String
    - id: table
      type: System.String
    - id: scope
      type: System.String
    - id: index
      type: System.String
    return:
      type: System.Threading.Tasks.Task{System.Boolean}
    content.vb: Public Function Delete(contract As String, table As String, scope As String, index As String) As Task(Of Boolean)
  overload: Tide.Ork.Classes.SimulatorClient.Delete*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: Tide.Ork.Classes
  commentId: N:Tide.Ork.Classes
  name: Tide.Ork.Classes
  nameWithType: Tide.Ork.Classes
  fullName: Tide.Ork.Classes
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Tide.Ork.Classes.SimulatorClient.#ctor*
  commentId: Overload:Tide.Ork.Classes.SimulatorClient.#ctor
  name: SimulatorClient
  nameWithType: SimulatorClient.SimulatorClient
  fullName: Tide.Ork.Classes.SimulatorClient.SimulatorClient
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Tide.Encryption.Ecc.C25519Key
  commentId: T:Tide.Encryption.Ecc.C25519Key
  parent: Tide.Encryption.Ecc
  isExternal: true
  name: C25519Key
  nameWithType: C25519Key
  fullName: Tide.Encryption.Ecc.C25519Key
- uid: Tide.Encryption.Ecc
  commentId: N:Tide.Encryption.Ecc
  isExternal: true
  name: Tide.Encryption.Ecc
  nameWithType: Tide.Encryption.Ecc
  fullName: Tide.Encryption.Ecc
- uid: Tide.Ork.Classes.SimulatorClient.Post*
  commentId: Overload:Tide.Ork.Classes.SimulatorClient.Post
  name: Post
  nameWithType: SimulatorClient.Post
  fullName: Tide.Ork.Classes.SimulatorClient.Post
- uid: System.Threading.Tasks.Task{System.Boolean}
  commentId: T:System.Threading.Tasks.Task{System.Boolean}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<Boolean>
  nameWithType: Task<Boolean>
  fullName: System.Threading.Tasks.Task<System.Boolean>
  nameWithType.vb: Task(Of Boolean)
  fullName.vb: System.Threading.Tasks.Task(Of System.Boolean)
  name.vb: Task(Of Boolean)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks.Task`1
  commentId: T:System.Threading.Tasks.Task`1
  isExternal: true
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
  nameWithType.vb: Task(Of TResult)
  fullName.vb: System.Threading.Tasks.Task(Of TResult)
  name.vb: Task(Of TResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks
  commentId: N:System.Threading.Tasks
  isExternal: true
  name: System.Threading.Tasks
  nameWithType: System.Threading.Tasks
  fullName: System.Threading.Tasks
- uid: Tide.Ork.Classes.SimulatorClient.Get*
  commentId: Overload:Tide.Ork.Classes.SimulatorClient.Get
  name: Get
  nameWithType: SimulatorClient.Get
  fullName: Tide.Ork.Classes.SimulatorClient.Get
- uid: System.Threading.Tasks.Task{System.String}
  commentId: T:System.Threading.Tasks.Task{System.String}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<String>
  nameWithType: Task<String>
  fullName: System.Threading.Tasks.Task<System.String>
  nameWithType.vb: Task(Of String)
  fullName.vb: System.Threading.Tasks.Task(Of System.String)
  name.vb: Task(Of String)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks.Task{System.Collections.Generic.List{System.String}}
  commentId: T:System.Threading.Tasks.Task{System.Collections.Generic.List{System.String}}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<List<String>>
  nameWithType: Task<List<String>>
  fullName: System.Threading.Tasks.Task<System.Collections.Generic.List<System.String>>
  nameWithType.vb: Task(Of List(Of String))
  fullName.vb: System.Threading.Tasks.Task(Of System.Collections.Generic.List(Of System.String))
  name.vb: Task(Of List(Of String))
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Tide.Ork.Classes.SimulatorClient.Delete*
  commentId: Overload:Tide.Ork.Classes.SimulatorClient.Delete
  name: Delete
  nameWithType: SimulatorClient.Delete
  fullName: Tide.Ork.Classes.SimulatorClient.Delete
