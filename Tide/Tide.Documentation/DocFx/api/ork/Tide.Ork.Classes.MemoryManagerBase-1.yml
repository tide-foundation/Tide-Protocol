### YamlMime:ManagedReference
items:
- uid: Tide.Ork.Classes.MemoryManagerBase`1
  commentId: T:Tide.Ork.Classes.MemoryManagerBase`1
  id: MemoryManagerBase`1
  parent: Tide.Ork.Classes
  children:
  - Tide.Ork.Classes.MemoryManagerBase`1.#ctor
  - Tide.Ork.Classes.MemoryManagerBase`1._items
  - Tide.Ork.Classes.MemoryManagerBase`1.Delete(System.Guid)
  - Tide.Ork.Classes.MemoryManagerBase`1.Exist(System.Guid)
  - Tide.Ork.Classes.MemoryManagerBase`1.GetAll
  - Tide.Ork.Classes.MemoryManagerBase`1.GetById(System.Guid)
  - Tide.Ork.Classes.MemoryManagerBase`1.GetEnumerable
  - Tide.Ork.Classes.MemoryManagerBase`1.SetOrUpdate(`0)
  langs:
  - csharp
  - vb
  name: MemoryManagerBase<T>
  nameWithType: MemoryManagerBase<T>
  fullName: Tide.Ork.Classes.MemoryManagerBase<T>
  type: Class
  source:
    remote:
      path: Tide/Tide.Ork/Classes/MemoryManagerBase.cs
      branch: master
      repo: https://github.com/tide-foundation/Tide-Protocol.git
    id: MemoryManagerBase
    path: ../../Tide.Ork/Classes/MemoryManagerBase.cs
    startLine: 9
  assemblies:
  - Tide.Ork
  namespace: Tide.Ork.Classes
  syntax:
    content: 'public class MemoryManagerBase<T> : IManager<T> where T : SerializableByteBase<T>, IGuid, new()'
    typeParameters:
    - id: T
    content.vb: >-
      Public Class MemoryManagerBase(Of T As {SerializableByteBase(Of T), IGuid, New})

          Implements IManager(Of T)
  inheritance:
  - System.Object
  derivedClasses:
  - Tide.Ork.Classes.MemoryKeyManager
  - Tide.Ork.Classes.MemoryRuleManager
  implements:
  - Tide.Ork.Classes.IManager{{T}}
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  nameWithType.vb: MemoryManagerBase(Of T)
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
  fullName.vb: Tide.Ork.Classes.MemoryManagerBase(Of T)
  name.vb: MemoryManagerBase(Of T)
- uid: Tide.Ork.Classes.MemoryManagerBase`1._items
  commentId: F:Tide.Ork.Classes.MemoryManagerBase`1._items
  id: _items
  parent: Tide.Ork.Classes.MemoryManagerBase`1
  langs:
  - csharp
  - vb
  name: _items
  nameWithType: MemoryManagerBase<T>._items
  fullName: Tide.Ork.Classes.MemoryManagerBase<T>._items
  type: Field
  source:
    remote:
      path: Tide/Tide.Ork/Classes/MemoryManagerBase.cs
      branch: master
      repo: https://github.com/tide-foundation/Tide-Protocol.git
    id: _items
    path: ../../Tide.Ork/Classes/MemoryManagerBase.cs
    startLine: 11
  assemblies:
  - Tide.Ork
  namespace: Tide.Ork.Classes
  syntax:
    content: protected readonly Dictionary<Guid, string> _items
    return:
      type: System.Collections.Generic.Dictionary{System.Guid,System.String}
    content.vb: Protected ReadOnly _items As Dictionary(Of Guid, String)
  nameWithType.vb: MemoryManagerBase(Of T)._items
  modifiers.csharp:
  - protected
  - readonly
  modifiers.vb:
  - Protected
  - ReadOnly
  fullName.vb: Tide.Ork.Classes.MemoryManagerBase(Of T)._items
- uid: Tide.Ork.Classes.MemoryManagerBase`1.#ctor
  commentId: M:Tide.Ork.Classes.MemoryManagerBase`1.#ctor
  id: '#ctor'
  parent: Tide.Ork.Classes.MemoryManagerBase`1
  langs:
  - csharp
  - vb
  name: MemoryManagerBase()
  nameWithType: MemoryManagerBase<T>.MemoryManagerBase()
  fullName: Tide.Ork.Classes.MemoryManagerBase<T>.MemoryManagerBase()
  type: Constructor
  source:
    remote:
      path: Tide/Tide.Ork/Classes/MemoryManagerBase.cs
      branch: master
      repo: https://github.com/tide-foundation/Tide-Protocol.git
    id: .ctor
    path: ../../Tide.Ork/Classes/MemoryManagerBase.cs
    startLine: 13
  assemblies:
  - Tide.Ork
  namespace: Tide.Ork.Classes
  syntax:
    content: public MemoryManagerBase()
    content.vb: Public Sub New
  overload: Tide.Ork.Classes.MemoryManagerBase`1.#ctor*
  nameWithType.vb: MemoryManagerBase(Of T).MemoryManagerBase()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Tide.Ork.Classes.MemoryManagerBase(Of T).MemoryManagerBase()
- uid: Tide.Ork.Classes.MemoryManagerBase`1.Delete(System.Guid)
  commentId: M:Tide.Ork.Classes.MemoryManagerBase`1.Delete(System.Guid)
  id: Delete(System.Guid)
  parent: Tide.Ork.Classes.MemoryManagerBase`1
  langs:
  - csharp
  - vb
  name: Delete(Guid)
  nameWithType: MemoryManagerBase<T>.Delete(Guid)
  fullName: Tide.Ork.Classes.MemoryManagerBase<T>.Delete(System.Guid)
  type: Method
  source:
    remote:
      path: Tide/Tide.Ork/Classes/MemoryManagerBase.cs
      branch: master
      repo: https://github.com/tide-foundation/Tide-Protocol.git
    id: Delete
    path: ../../Tide.Ork/Classes/MemoryManagerBase.cs
    startLine: 18
  assemblies:
  - Tide.Ork
  namespace: Tide.Ork.Classes
  syntax:
    content: public Task Delete(Guid id)
    parameters:
    - id: id
      type: System.Guid
    return:
      type: System.Threading.Tasks.Task
    content.vb: Public Function Delete(id As Guid) As Task
  overload: Tide.Ork.Classes.MemoryManagerBase`1.Delete*
  implements:
  - Tide.Ork.Classes.IManager{{T}}.Delete(System.Guid)
  nameWithType.vb: MemoryManagerBase(Of T).Delete(Guid)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Tide.Ork.Classes.MemoryManagerBase(Of T).Delete(System.Guid)
- uid: Tide.Ork.Classes.MemoryManagerBase`1.Exist(System.Guid)
  commentId: M:Tide.Ork.Classes.MemoryManagerBase`1.Exist(System.Guid)
  id: Exist(System.Guid)
  parent: Tide.Ork.Classes.MemoryManagerBase`1
  langs:
  - csharp
  - vb
  name: Exist(Guid)
  nameWithType: MemoryManagerBase<T>.Exist(Guid)
  fullName: Tide.Ork.Classes.MemoryManagerBase<T>.Exist(System.Guid)
  type: Method
  source:
    remote:
      path: Tide/Tide.Ork/Classes/MemoryManagerBase.cs
      branch: master
      repo: https://github.com/tide-foundation/Tide-Protocol.git
    id: Exist
    path: ../../Tide.Ork/Classes/MemoryManagerBase.cs
    startLine: 26
  assemblies:
  - Tide.Ork
  namespace: Tide.Ork.Classes
  syntax:
    content: public Task<bool> Exist(Guid id)
    parameters:
    - id: id
      type: System.Guid
    return:
      type: System.Threading.Tasks.Task{System.Boolean}
    content.vb: Public Function Exist(id As Guid) As Task(Of Boolean)
  overload: Tide.Ork.Classes.MemoryManagerBase`1.Exist*
  implements:
  - Tide.Ork.Classes.IManager{{T}}.Exist(System.Guid)
  nameWithType.vb: MemoryManagerBase(Of T).Exist(Guid)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Tide.Ork.Classes.MemoryManagerBase(Of T).Exist(System.Guid)
- uid: Tide.Ork.Classes.MemoryManagerBase`1.GetAll
  commentId: M:Tide.Ork.Classes.MemoryManagerBase`1.GetAll
  id: GetAll
  parent: Tide.Ork.Classes.MemoryManagerBase`1
  langs:
  - csharp
  - vb
  name: GetAll()
  nameWithType: MemoryManagerBase<T>.GetAll()
  fullName: Tide.Ork.Classes.MemoryManagerBase<T>.GetAll()
  type: Method
  source:
    remote:
      path: Tide/Tide.Ork/Classes/MemoryManagerBase.cs
      branch: master
      repo: https://github.com/tide-foundation/Tide-Protocol.git
    id: GetAll
    path: ../../Tide.Ork/Classes/MemoryManagerBase.cs
    startLine: 31
  assemblies:
  - Tide.Ork
  namespace: Tide.Ork.Classes
  syntax:
    content: public Task<List<T>> GetAll()
    return:
      type: System.Threading.Tasks.Task{System.Collections.Generic.List{{T}}}
    content.vb: Public Function GetAll As Task(Of List(Of T))
  overload: Tide.Ork.Classes.MemoryManagerBase`1.GetAll*
  implements:
  - Tide.Ork.Classes.IManager{{T}}.GetAll
  nameWithType.vb: MemoryManagerBase(Of T).GetAll()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Tide.Ork.Classes.MemoryManagerBase(Of T).GetAll()
- uid: Tide.Ork.Classes.MemoryManagerBase`1.GetById(System.Guid)
  commentId: M:Tide.Ork.Classes.MemoryManagerBase`1.GetById(System.Guid)
  id: GetById(System.Guid)
  parent: Tide.Ork.Classes.MemoryManagerBase`1
  langs:
  - csharp
  - vb
  name: GetById(Guid)
  nameWithType: MemoryManagerBase<T>.GetById(Guid)
  fullName: Tide.Ork.Classes.MemoryManagerBase<T>.GetById(System.Guid)
  type: Method
  source:
    remote:
      path: Tide/Tide.Ork/Classes/MemoryManagerBase.cs
      branch: master
      repo: https://github.com/tide-foundation/Tide-Protocol.git
    id: GetById
    path: ../../Tide.Ork/Classes/MemoryManagerBase.cs
    startLine: 36
  assemblies:
  - Tide.Ork
  namespace: Tide.Ork.Classes
  syntax:
    content: public Task<T> GetById(Guid id)
    parameters:
    - id: id
      type: System.Guid
    return:
      type: System.Threading.Tasks.Task{{T}}
    content.vb: Public Function GetById(id As Guid) As Task(Of T)
  overload: Tide.Ork.Classes.MemoryManagerBase`1.GetById*
  implements:
  - Tide.Ork.Classes.IManager{{T}}.GetById(System.Guid)
  nameWithType.vb: MemoryManagerBase(Of T).GetById(Guid)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Tide.Ork.Classes.MemoryManagerBase(Of T).GetById(System.Guid)
- uid: Tide.Ork.Classes.MemoryManagerBase`1.SetOrUpdate(`0)
  commentId: M:Tide.Ork.Classes.MemoryManagerBase`1.SetOrUpdate(`0)
  id: SetOrUpdate(`0)
  parent: Tide.Ork.Classes.MemoryManagerBase`1
  langs:
  - csharp
  - vb
  name: SetOrUpdate(T)
  nameWithType: MemoryManagerBase<T>.SetOrUpdate(T)
  fullName: Tide.Ork.Classes.MemoryManagerBase<T>.SetOrUpdate(T)
  type: Method
  source:
    remote:
      path: Tide/Tide.Ork/Classes/MemoryManagerBase.cs
      branch: master
      repo: https://github.com/tide-foundation/Tide-Protocol.git
    id: SetOrUpdate
    path: ../../Tide.Ork/Classes/MemoryManagerBase.cs
    startLine: 44
  assemblies:
  - Tide.Ork
  namespace: Tide.Ork.Classes
  syntax:
    content: public Task<TideResponse> SetOrUpdate(T entity)
    parameters:
    - id: entity
      type: '{T}'
    return:
      type: System.Threading.Tasks.Task{Tide.Core.TideResponse}
    content.vb: Public Function SetOrUpdate(entity As T) As Task(Of TideResponse)
  overload: Tide.Ork.Classes.MemoryManagerBase`1.SetOrUpdate*
  implements:
  - Tide.Ork.Classes.IManager{{T}}.SetOrUpdate({T})
  nameWithType.vb: MemoryManagerBase(Of T).SetOrUpdate(T)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Tide.Ork.Classes.MemoryManagerBase(Of T).SetOrUpdate(T)
- uid: Tide.Ork.Classes.MemoryManagerBase`1.GetEnumerable
  commentId: M:Tide.Ork.Classes.MemoryManagerBase`1.GetEnumerable
  id: GetEnumerable
  parent: Tide.Ork.Classes.MemoryManagerBase`1
  langs:
  - csharp
  - vb
  name: GetEnumerable()
  nameWithType: MemoryManagerBase<T>.GetEnumerable()
  fullName: Tide.Ork.Classes.MemoryManagerBase<T>.GetEnumerable()
  type: Method
  source:
    remote:
      path: Tide/Tide.Ork/Classes/MemoryManagerBase.cs
      branch: master
      repo: https://github.com/tide-foundation/Tide-Protocol.git
    id: GetEnumerable
    path: ../../Tide.Ork/Classes/MemoryManagerBase.cs
    startLine: 50
  assemblies:
  - Tide.Ork
  namespace: Tide.Ork.Classes
  syntax:
    content: protected IEnumerable<T> GetEnumerable()
    return:
      type: System.Collections.Generic.IEnumerable{{T}}
    content.vb: Protected Function GetEnumerable As IEnumerable(Of T)
  overload: Tide.Ork.Classes.MemoryManagerBase`1.GetEnumerable*
  nameWithType.vb: MemoryManagerBase(Of T).GetEnumerable()
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
  fullName.vb: Tide.Ork.Classes.MemoryManagerBase(Of T).GetEnumerable()
references:
- uid: Tide.Ork.Classes
  commentId: N:Tide.Ork.Classes
  name: Tide.Ork.Classes
  nameWithType: Tide.Ork.Classes
  fullName: Tide.Ork.Classes
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Tide.Ork.Classes.IManager{{T}}
  commentId: T:Tide.Ork.Classes.IManager{`0}
  parent: Tide.Ork.Classes
  definition: Tide.Ork.Classes.IManager`1
  name: IManager<T>
  nameWithType: IManager<T>
  fullName: Tide.Ork.Classes.IManager<T>
  nameWithType.vb: IManager(Of T)
  fullName.vb: Tide.Ork.Classes.IManager(Of T)
  name.vb: IManager(Of T)
  spec.csharp:
  - uid: Tide.Ork.Classes.IManager`1
    name: IManager
    nameWithType: IManager
    fullName: Tide.Ork.Classes.IManager
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Tide.Ork.Classes.IManager`1
    name: IManager
    nameWithType: IManager
    fullName: Tide.Ork.Classes.IManager
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Tide.Ork.Classes.IManager`1
  commentId: T:Tide.Ork.Classes.IManager`1
  name: IManager<T>
  nameWithType: IManager<T>
  fullName: Tide.Ork.Classes.IManager<T>
  nameWithType.vb: IManager(Of T)
  fullName.vb: Tide.Ork.Classes.IManager(Of T)
  name.vb: IManager(Of T)
  spec.csharp:
  - uid: Tide.Ork.Classes.IManager`1
    name: IManager
    nameWithType: IManager
    fullName: Tide.Ork.Classes.IManager
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Tide.Ork.Classes.IManager`1
    name: IManager
    nameWithType: IManager
    fullName: Tide.Ork.Classes.IManager
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.Dictionary{System.Guid,System.String}
  commentId: T:System.Collections.Generic.Dictionary{System.Guid,System.String}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.Dictionary`2
  name: Dictionary<Guid, String>
  nameWithType: Dictionary<Guid, String>
  fullName: System.Collections.Generic.Dictionary<System.Guid, System.String>
  nameWithType.vb: Dictionary(Of Guid, String)
  fullName.vb: System.Collections.Generic.Dictionary(Of System.Guid, System.String)
  name.vb: Dictionary(Of Guid, String)
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Guid
    name: Guid
    nameWithType: Guid
    fullName: System.Guid
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Guid
    name: Guid
    nameWithType: Guid
    fullName: System.Guid
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.Dictionary`2
  commentId: T:System.Collections.Generic.Dictionary`2
  isExternal: true
  name: Dictionary<TKey, TValue>
  nameWithType: Dictionary<TKey, TValue>
  fullName: System.Collections.Generic.Dictionary<TKey, TValue>
  nameWithType.vb: Dictionary(Of TKey, TValue)
  fullName.vb: System.Collections.Generic.Dictionary(Of TKey, TValue)
  name.vb: Dictionary(Of TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: Tide.Ork.Classes.MemoryManagerBase`1.#ctor*
  commentId: Overload:Tide.Ork.Classes.MemoryManagerBase`1.#ctor
  name: MemoryManagerBase
  nameWithType: MemoryManagerBase<T>.MemoryManagerBase
  fullName: Tide.Ork.Classes.MemoryManagerBase<T>.MemoryManagerBase
  nameWithType.vb: MemoryManagerBase(Of T).MemoryManagerBase
  fullName.vb: Tide.Ork.Classes.MemoryManagerBase(Of T).MemoryManagerBase
- uid: Tide.Ork.Classes.MemoryManagerBase`1.Delete*
  commentId: Overload:Tide.Ork.Classes.MemoryManagerBase`1.Delete
  name: Delete
  nameWithType: MemoryManagerBase<T>.Delete
  fullName: Tide.Ork.Classes.MemoryManagerBase<T>.Delete
  nameWithType.vb: MemoryManagerBase(Of T).Delete
  fullName.vb: Tide.Ork.Classes.MemoryManagerBase(Of T).Delete
- uid: Tide.Ork.Classes.IManager{{T}}.Delete(System.Guid)
  commentId: M:Tide.Ork.Classes.IManager{`0}.Delete(System.Guid)
  parent: Tide.Ork.Classes.IManager{{T}}
  definition: Tide.Ork.Classes.IManager`1.Delete(System.Guid)
  name: Delete(Guid)
  nameWithType: IManager<T>.Delete(Guid)
  fullName: Tide.Ork.Classes.IManager<T>.Delete(System.Guid)
  nameWithType.vb: IManager(Of T).Delete(Guid)
  fullName.vb: Tide.Ork.Classes.IManager(Of T).Delete(System.Guid)
  spec.csharp:
  - uid: Tide.Ork.Classes.IManager`1.Delete(System.Guid)
    name: Delete
    nameWithType: IManager<T>.Delete
    fullName: Tide.Ork.Classes.IManager<T>.Delete
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Guid
    name: Guid
    nameWithType: Guid
    fullName: System.Guid
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Tide.Ork.Classes.IManager`1.Delete(System.Guid)
    name: Delete
    nameWithType: IManager(Of T).Delete
    fullName: Tide.Ork.Classes.IManager(Of T).Delete
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Guid
    name: Guid
    nameWithType: Guid
    fullName: System.Guid
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Guid
  commentId: T:System.Guid
  parent: System
  isExternal: true
  name: Guid
  nameWithType: Guid
  fullName: System.Guid
- uid: System.Threading.Tasks.Task
  commentId: T:System.Threading.Tasks.Task
  parent: System.Threading.Tasks
  isExternal: true
  name: Task
  nameWithType: Task
  fullName: System.Threading.Tasks.Task
- uid: Tide.Ork.Classes.IManager`1.Delete(System.Guid)
  commentId: M:Tide.Ork.Classes.IManager`1.Delete(System.Guid)
  isExternal: true
  name: Delete(Guid)
  nameWithType: IManager<T>.Delete(Guid)
  fullName: Tide.Ork.Classes.IManager<T>.Delete(System.Guid)
  nameWithType.vb: IManager(Of T).Delete(Guid)
  fullName.vb: Tide.Ork.Classes.IManager(Of T).Delete(System.Guid)
  spec.csharp:
  - uid: Tide.Ork.Classes.IManager`1.Delete(System.Guid)
    name: Delete
    nameWithType: IManager<T>.Delete
    fullName: Tide.Ork.Classes.IManager<T>.Delete
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Guid
    name: Guid
    nameWithType: Guid
    fullName: System.Guid
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Tide.Ork.Classes.IManager`1.Delete(System.Guid)
    name: Delete
    nameWithType: IManager(Of T).Delete
    fullName: Tide.Ork.Classes.IManager(Of T).Delete
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Guid
    name: Guid
    nameWithType: Guid
    fullName: System.Guid
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks
  commentId: N:System.Threading.Tasks
  isExternal: true
  name: System.Threading.Tasks
  nameWithType: System.Threading.Tasks
  fullName: System.Threading.Tasks
- uid: Tide.Ork.Classes.MemoryManagerBase`1.Exist*
  commentId: Overload:Tide.Ork.Classes.MemoryManagerBase`1.Exist
  name: Exist
  nameWithType: MemoryManagerBase<T>.Exist
  fullName: Tide.Ork.Classes.MemoryManagerBase<T>.Exist
  nameWithType.vb: MemoryManagerBase(Of T).Exist
  fullName.vb: Tide.Ork.Classes.MemoryManagerBase(Of T).Exist
- uid: Tide.Ork.Classes.IManager{{T}}.Exist(System.Guid)
  commentId: M:Tide.Ork.Classes.IManager{`0}.Exist(System.Guid)
  parent: Tide.Ork.Classes.IManager{{T}}
  definition: Tide.Ork.Classes.IManager`1.Exist(System.Guid)
  name: Exist(Guid)
  nameWithType: IManager<T>.Exist(Guid)
  fullName: Tide.Ork.Classes.IManager<T>.Exist(System.Guid)
  nameWithType.vb: IManager(Of T).Exist(Guid)
  fullName.vb: Tide.Ork.Classes.IManager(Of T).Exist(System.Guid)
  spec.csharp:
  - uid: Tide.Ork.Classes.IManager`1.Exist(System.Guid)
    name: Exist
    nameWithType: IManager<T>.Exist
    fullName: Tide.Ork.Classes.IManager<T>.Exist
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Guid
    name: Guid
    nameWithType: Guid
    fullName: System.Guid
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Tide.Ork.Classes.IManager`1.Exist(System.Guid)
    name: Exist
    nameWithType: IManager(Of T).Exist
    fullName: Tide.Ork.Classes.IManager(Of T).Exist
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Guid
    name: Guid
    nameWithType: Guid
    fullName: System.Guid
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks.Task{System.Boolean}
  commentId: T:System.Threading.Tasks.Task{System.Boolean}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<Boolean>
  nameWithType: Task<Boolean>
  fullName: System.Threading.Tasks.Task<System.Boolean>
  nameWithType.vb: Task(Of Boolean)
  fullName.vb: System.Threading.Tasks.Task(Of System.Boolean)
  name.vb: Task(Of Boolean)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Tide.Ork.Classes.IManager`1.Exist(System.Guid)
  commentId: M:Tide.Ork.Classes.IManager`1.Exist(System.Guid)
  isExternal: true
  name: Exist(Guid)
  nameWithType: IManager<T>.Exist(Guid)
  fullName: Tide.Ork.Classes.IManager<T>.Exist(System.Guid)
  nameWithType.vb: IManager(Of T).Exist(Guid)
  fullName.vb: Tide.Ork.Classes.IManager(Of T).Exist(System.Guid)
  spec.csharp:
  - uid: Tide.Ork.Classes.IManager`1.Exist(System.Guid)
    name: Exist
    nameWithType: IManager<T>.Exist
    fullName: Tide.Ork.Classes.IManager<T>.Exist
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Guid
    name: Guid
    nameWithType: Guid
    fullName: System.Guid
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Tide.Ork.Classes.IManager`1.Exist(System.Guid)
    name: Exist
    nameWithType: IManager(Of T).Exist
    fullName: Tide.Ork.Classes.IManager(Of T).Exist
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Guid
    name: Guid
    nameWithType: Guid
    fullName: System.Guid
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks.Task`1
  commentId: T:System.Threading.Tasks.Task`1
  isExternal: true
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
  nameWithType.vb: Task(Of TResult)
  fullName.vb: System.Threading.Tasks.Task(Of TResult)
  name.vb: Task(Of TResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: Tide.Ork.Classes.MemoryManagerBase`1.GetAll*
  commentId: Overload:Tide.Ork.Classes.MemoryManagerBase`1.GetAll
  name: GetAll
  nameWithType: MemoryManagerBase<T>.GetAll
  fullName: Tide.Ork.Classes.MemoryManagerBase<T>.GetAll
  nameWithType.vb: MemoryManagerBase(Of T).GetAll
  fullName.vb: Tide.Ork.Classes.MemoryManagerBase(Of T).GetAll
- uid: Tide.Ork.Classes.IManager{{T}}.GetAll
  commentId: M:Tide.Ork.Classes.IManager{`0}.GetAll
  parent: Tide.Ork.Classes.IManager{{T}}
  definition: Tide.Ork.Classes.IManager`1.GetAll
  name: GetAll()
  nameWithType: IManager<T>.GetAll()
  fullName: Tide.Ork.Classes.IManager<T>.GetAll()
  nameWithType.vb: IManager(Of T).GetAll()
  fullName.vb: Tide.Ork.Classes.IManager(Of T).GetAll()
  spec.csharp:
  - uid: Tide.Ork.Classes.IManager`1.GetAll
    name: GetAll
    nameWithType: IManager<T>.GetAll
    fullName: Tide.Ork.Classes.IManager<T>.GetAll
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Tide.Ork.Classes.IManager`1.GetAll
    name: GetAll
    nameWithType: IManager(Of T).GetAll
    fullName: Tide.Ork.Classes.IManager(Of T).GetAll
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks.Task{System.Collections.Generic.List{{T}}}
  commentId: T:System.Threading.Tasks.Task{System.Collections.Generic.List{`0}}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<List<T>>
  nameWithType: Task<List<T>>
  fullName: System.Threading.Tasks.Task<System.Collections.Generic.List<T>>
  nameWithType.vb: Task(Of List(Of T))
  fullName.vb: System.Threading.Tasks.Task(Of System.Collections.Generic.List(Of T))
  name.vb: Task(Of List(Of T))
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Tide.Ork.Classes.IManager`1.GetAll
  commentId: M:Tide.Ork.Classes.IManager`1.GetAll
  name: GetAll()
  nameWithType: IManager<T>.GetAll()
  fullName: Tide.Ork.Classes.IManager<T>.GetAll()
  nameWithType.vb: IManager(Of T).GetAll()
  fullName.vb: Tide.Ork.Classes.IManager(Of T).GetAll()
  spec.csharp:
  - uid: Tide.Ork.Classes.IManager`1.GetAll
    name: GetAll
    nameWithType: IManager<T>.GetAll
    fullName: Tide.Ork.Classes.IManager<T>.GetAll
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Tide.Ork.Classes.IManager`1.GetAll
    name: GetAll
    nameWithType: IManager(Of T).GetAll
    fullName: Tide.Ork.Classes.IManager(Of T).GetAll
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Tide.Ork.Classes.MemoryManagerBase`1.GetById*
  commentId: Overload:Tide.Ork.Classes.MemoryManagerBase`1.GetById
  name: GetById
  nameWithType: MemoryManagerBase<T>.GetById
  fullName: Tide.Ork.Classes.MemoryManagerBase<T>.GetById
  nameWithType.vb: MemoryManagerBase(Of T).GetById
  fullName.vb: Tide.Ork.Classes.MemoryManagerBase(Of T).GetById
- uid: Tide.Ork.Classes.IManager{{T}}.GetById(System.Guid)
  commentId: M:Tide.Ork.Classes.IManager{`0}.GetById(System.Guid)
  parent: Tide.Ork.Classes.IManager{{T}}
  definition: Tide.Ork.Classes.IManager`1.GetById(System.Guid)
  name: GetById(Guid)
  nameWithType: IManager<T>.GetById(Guid)
  fullName: Tide.Ork.Classes.IManager<T>.GetById(System.Guid)
  nameWithType.vb: IManager(Of T).GetById(Guid)
  fullName.vb: Tide.Ork.Classes.IManager(Of T).GetById(System.Guid)
  spec.csharp:
  - uid: Tide.Ork.Classes.IManager`1.GetById(System.Guid)
    name: GetById
    nameWithType: IManager<T>.GetById
    fullName: Tide.Ork.Classes.IManager<T>.GetById
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Guid
    name: Guid
    nameWithType: Guid
    fullName: System.Guid
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Tide.Ork.Classes.IManager`1.GetById(System.Guid)
    name: GetById
    nameWithType: IManager(Of T).GetById
    fullName: Tide.Ork.Classes.IManager(Of T).GetById
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Guid
    name: Guid
    nameWithType: Guid
    fullName: System.Guid
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks.Task{{T}}
  commentId: T:System.Threading.Tasks.Task{`0}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<T>
  nameWithType: Task<T>
  fullName: System.Threading.Tasks.Task<T>
  nameWithType.vb: Task(Of T)
  fullName.vb: System.Threading.Tasks.Task(Of T)
  name.vb: Task(Of T)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Tide.Ork.Classes.IManager`1.GetById(System.Guid)
  commentId: M:Tide.Ork.Classes.IManager`1.GetById(System.Guid)
  isExternal: true
  name: GetById(Guid)
  nameWithType: IManager<T>.GetById(Guid)
  fullName: Tide.Ork.Classes.IManager<T>.GetById(System.Guid)
  nameWithType.vb: IManager(Of T).GetById(Guid)
  fullName.vb: Tide.Ork.Classes.IManager(Of T).GetById(System.Guid)
  spec.csharp:
  - uid: Tide.Ork.Classes.IManager`1.GetById(System.Guid)
    name: GetById
    nameWithType: IManager<T>.GetById
    fullName: Tide.Ork.Classes.IManager<T>.GetById
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Guid
    name: Guid
    nameWithType: Guid
    fullName: System.Guid
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Tide.Ork.Classes.IManager`1.GetById(System.Guid)
    name: GetById
    nameWithType: IManager(Of T).GetById
    fullName: Tide.Ork.Classes.IManager(Of T).GetById
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Guid
    name: Guid
    nameWithType: Guid
    fullName: System.Guid
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Tide.Ork.Classes.MemoryManagerBase`1.SetOrUpdate*
  commentId: Overload:Tide.Ork.Classes.MemoryManagerBase`1.SetOrUpdate
  name: SetOrUpdate
  nameWithType: MemoryManagerBase<T>.SetOrUpdate
  fullName: Tide.Ork.Classes.MemoryManagerBase<T>.SetOrUpdate
  nameWithType.vb: MemoryManagerBase(Of T).SetOrUpdate
  fullName.vb: Tide.Ork.Classes.MemoryManagerBase(Of T).SetOrUpdate
- uid: Tide.Ork.Classes.IManager{{T}}.SetOrUpdate({T})
  commentId: M:Tide.Ork.Classes.IManager{`0}.SetOrUpdate(`0)
  parent: Tide.Ork.Classes.IManager{{T}}
  definition: Tide.Ork.Classes.IManager`1.SetOrUpdate(`0)
  name: SetOrUpdate(T)
  nameWithType: IManager<T>.SetOrUpdate(T)
  fullName: Tide.Ork.Classes.IManager<T>.SetOrUpdate(T)
  nameWithType.vb: IManager(Of T).SetOrUpdate(T)
  fullName.vb: Tide.Ork.Classes.IManager(Of T).SetOrUpdate(T)
  spec.csharp:
  - uid: Tide.Ork.Classes.IManager`1.SetOrUpdate(`0)
    name: SetOrUpdate
    nameWithType: IManager<T>.SetOrUpdate
    fullName: Tide.Ork.Classes.IManager<T>.SetOrUpdate
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Tide.Ork.Classes.IManager`1.SetOrUpdate(`0)
    name: SetOrUpdate
    nameWithType: IManager(Of T).SetOrUpdate
    fullName: Tide.Ork.Classes.IManager(Of T).SetOrUpdate
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: '{T}'
  commentId: '!:T'
  definition: T
  name: T
  nameWithType: T
  fullName: T
- uid: System.Threading.Tasks.Task{Tide.Core.TideResponse}
  commentId: T:System.Threading.Tasks.Task{Tide.Core.TideResponse}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<TideResponse>
  nameWithType: Task<TideResponse>
  fullName: System.Threading.Tasks.Task<Tide.Core.TideResponse>
  nameWithType.vb: Task(Of TideResponse)
  fullName.vb: System.Threading.Tasks.Task(Of Tide.Core.TideResponse)
  name.vb: Task(Of TideResponse)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Tide.Core.TideResponse
    name: TideResponse
    nameWithType: TideResponse
    fullName: Tide.Core.TideResponse
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Tide.Core.TideResponse
    name: TideResponse
    nameWithType: TideResponse
    fullName: Tide.Core.TideResponse
  - name: )
    nameWithType: )
    fullName: )
- uid: Tide.Ork.Classes.IManager`1.SetOrUpdate(`0)
  commentId: M:Tide.Ork.Classes.IManager`1.SetOrUpdate(`0)
  name: SetOrUpdate(T)
  nameWithType: IManager<T>.SetOrUpdate(T)
  fullName: Tide.Ork.Classes.IManager<T>.SetOrUpdate(T)
  nameWithType.vb: IManager(Of T).SetOrUpdate(T)
  fullName.vb: Tide.Ork.Classes.IManager(Of T).SetOrUpdate(T)
  spec.csharp:
  - uid: Tide.Ork.Classes.IManager`1.SetOrUpdate(`0)
    name: SetOrUpdate
    nameWithType: IManager<T>.SetOrUpdate
    fullName: Tide.Ork.Classes.IManager<T>.SetOrUpdate
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Tide.Ork.Classes.IManager`1.SetOrUpdate(`0)
    name: SetOrUpdate
    nameWithType: IManager(Of T).SetOrUpdate
    fullName: Tide.Ork.Classes.IManager(Of T).SetOrUpdate
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: T
  name: T
  nameWithType: T
  fullName: T
- uid: Tide.Ork.Classes.MemoryManagerBase`1.GetEnumerable*
  commentId: Overload:Tide.Ork.Classes.MemoryManagerBase`1.GetEnumerable
  name: GetEnumerable
  nameWithType: MemoryManagerBase<T>.GetEnumerable
  fullName: Tide.Ork.Classes.MemoryManagerBase<T>.GetEnumerable
  nameWithType.vb: MemoryManagerBase(Of T).GetEnumerable
  fullName.vb: Tide.Ork.Classes.MemoryManagerBase(Of T).GetEnumerable
- uid: System.Collections.Generic.IEnumerable{{T}}
  commentId: T:System.Collections.Generic.IEnumerable{`0}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
