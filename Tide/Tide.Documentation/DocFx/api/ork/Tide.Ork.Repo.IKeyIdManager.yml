### YamlMime:ManagedReference
items:
- uid: Tide.Ork.Repo.IKeyIdManager
  commentId: T:Tide.Ork.Repo.IKeyIdManager
  id: IKeyIdManager
  parent: Tide.Ork.Repo
  children:
  - Tide.Ork.Repo.IKeyIdManager.Delete(System.Guid)
  - Tide.Ork.Repo.IKeyIdManager.Exist(System.Guid)
  - Tide.Ork.Repo.IKeyIdManager.GetAll
  - Tide.Ork.Repo.IKeyIdManager.GetById(System.Guid)
  - Tide.Ork.Repo.IKeyIdManager.SetOrUpdate(Tide.Core.KeyIdVault)
  langs:
  - csharp
  - vb
  name: IKeyIdManager
  nameWithType: IKeyIdManager
  fullName: Tide.Ork.Repo.IKeyIdManager
  type: Interface
  source:
    remote:
      path: Tide/Tide.Ork/Repo/IKeyIdManager.cs
      branch: master
      repo: https://github.com/tide-foundation/Tide-Protocol.git
    id: IKeyIdManager
    path: ../../Tide.Ork/Repo/IKeyIdManager.cs
    startLine: 23
  assemblies:
  - Tide.Ork
  namespace: Tide.Ork.Repo
  syntax:
    content: public interface IKeyIdManager
    content.vb: Public Interface IKeyIdManager
  modifiers.csharp:
  - public
  - interface
  modifiers.vb:
  - Public
  - Interface
- uid: Tide.Ork.Repo.IKeyIdManager.Exist(System.Guid)
  commentId: M:Tide.Ork.Repo.IKeyIdManager.Exist(System.Guid)
  id: Exist(System.Guid)
  parent: Tide.Ork.Repo.IKeyIdManager
  langs:
  - csharp
  - vb
  name: Exist(Guid)
  nameWithType: IKeyIdManager.Exist(Guid)
  fullName: Tide.Ork.Repo.IKeyIdManager.Exist(System.Guid)
  type: Method
  source:
    remote:
      path: Tide/Tide.Ork/Repo/IKeyIdManager.cs
      branch: master
      repo: https://github.com/tide-foundation/Tide-Protocol.git
    id: Exist
    path: ../../Tide.Ork/Repo/IKeyIdManager.cs
    startLine: 25
  assemblies:
  - Tide.Ork
  namespace: Tide.Ork.Repo
  syntax:
    content: Task<bool> Exist(Guid id)
    parameters:
    - id: id
      type: System.Guid
    return:
      type: System.Threading.Tasks.Task{System.Boolean}
    content.vb: Function Exist(id As Guid) As Task(Of Boolean)
  overload: Tide.Ork.Repo.IKeyIdManager.Exist*
- uid: Tide.Ork.Repo.IKeyIdManager.GetById(System.Guid)
  commentId: M:Tide.Ork.Repo.IKeyIdManager.GetById(System.Guid)
  id: GetById(System.Guid)
  parent: Tide.Ork.Repo.IKeyIdManager
  langs:
  - csharp
  - vb
  name: GetById(Guid)
  nameWithType: IKeyIdManager.GetById(Guid)
  fullName: Tide.Ork.Repo.IKeyIdManager.GetById(System.Guid)
  type: Method
  source:
    remote:
      path: Tide/Tide.Ork/Repo/IKeyIdManager.cs
      branch: master
      repo: https://github.com/tide-foundation/Tide-Protocol.git
    id: GetById
    path: ../../Tide.Ork/Repo/IKeyIdManager.cs
    startLine: 26
  assemblies:
  - Tide.Ork
  namespace: Tide.Ork.Repo
  syntax:
    content: Task<KeyIdVault> GetById(Guid id)
    parameters:
    - id: id
      type: System.Guid
    return:
      type: System.Threading.Tasks.Task{Tide.Core.KeyIdVault}
    content.vb: Function GetById(id As Guid) As Task(Of KeyIdVault)
  overload: Tide.Ork.Repo.IKeyIdManager.GetById*
- uid: Tide.Ork.Repo.IKeyIdManager.GetAll
  commentId: M:Tide.Ork.Repo.IKeyIdManager.GetAll
  id: GetAll
  parent: Tide.Ork.Repo.IKeyIdManager
  langs:
  - csharp
  - vb
  name: GetAll()
  nameWithType: IKeyIdManager.GetAll()
  fullName: Tide.Ork.Repo.IKeyIdManager.GetAll()
  type: Method
  source:
    remote:
      path: Tide/Tide.Ork/Repo/IKeyIdManager.cs
      branch: master
      repo: https://github.com/tide-foundation/Tide-Protocol.git
    id: GetAll
    path: ../../Tide.Ork/Repo/IKeyIdManager.cs
    startLine: 27
  assemblies:
  - Tide.Ork
  namespace: Tide.Ork.Repo
  syntax:
    content: Task<List<KeyIdVault>> GetAll()
    return:
      type: System.Threading.Tasks.Task{System.Collections.Generic.List{Tide.Core.KeyIdVault}}
    content.vb: Function GetAll As Task(Of List(Of KeyIdVault))
  overload: Tide.Ork.Repo.IKeyIdManager.GetAll*
- uid: Tide.Ork.Repo.IKeyIdManager.SetOrUpdate(Tide.Core.KeyIdVault)
  commentId: M:Tide.Ork.Repo.IKeyIdManager.SetOrUpdate(Tide.Core.KeyIdVault)
  id: SetOrUpdate(Tide.Core.KeyIdVault)
  parent: Tide.Ork.Repo.IKeyIdManager
  langs:
  - csharp
  - vb
  name: SetOrUpdate(KeyIdVault)
  nameWithType: IKeyIdManager.SetOrUpdate(KeyIdVault)
  fullName: Tide.Ork.Repo.IKeyIdManager.SetOrUpdate(Tide.Core.KeyIdVault)
  type: Method
  source:
    remote:
      path: Tide/Tide.Ork/Repo/IKeyIdManager.cs
      branch: master
      repo: https://github.com/tide-foundation/Tide-Protocol.git
    id: SetOrUpdate
    path: ../../Tide.Ork/Repo/IKeyIdManager.cs
    startLine: 28
  assemblies:
  - Tide.Ork
  namespace: Tide.Ork.Repo
  syntax:
    content: Task<TideResponse> SetOrUpdate(KeyIdVault entity)
    parameters:
    - id: entity
      type: Tide.Core.KeyIdVault
    return:
      type: System.Threading.Tasks.Task{Tide.Core.TideResponse}
    content.vb: Function SetOrUpdate(entity As KeyIdVault) As Task(Of TideResponse)
  overload: Tide.Ork.Repo.IKeyIdManager.SetOrUpdate*
- uid: Tide.Ork.Repo.IKeyIdManager.Delete(System.Guid)
  commentId: M:Tide.Ork.Repo.IKeyIdManager.Delete(System.Guid)
  id: Delete(System.Guid)
  parent: Tide.Ork.Repo.IKeyIdManager
  langs:
  - csharp
  - vb
  name: Delete(Guid)
  nameWithType: IKeyIdManager.Delete(Guid)
  fullName: Tide.Ork.Repo.IKeyIdManager.Delete(System.Guid)
  type: Method
  source:
    remote:
      path: Tide/Tide.Ork/Repo/IKeyIdManager.cs
      branch: master
      repo: https://github.com/tide-foundation/Tide-Protocol.git
    id: Delete
    path: ../../Tide.Ork/Repo/IKeyIdManager.cs
    startLine: 29
  assemblies:
  - Tide.Ork
  namespace: Tide.Ork.Repo
  syntax:
    content: Task Delete(Guid id)
    parameters:
    - id: id
      type: System.Guid
    return:
      type: System.Threading.Tasks.Task
    content.vb: Function Delete(id As Guid) As Task
  overload: Tide.Ork.Repo.IKeyIdManager.Delete*
references:
- uid: Tide.Ork.Repo
  commentId: N:Tide.Ork.Repo
  name: Tide.Ork.Repo
  nameWithType: Tide.Ork.Repo
  fullName: Tide.Ork.Repo
- uid: Tide.Ork.Repo.IKeyIdManager.Exist*
  commentId: Overload:Tide.Ork.Repo.IKeyIdManager.Exist
  name: Exist
  nameWithType: IKeyIdManager.Exist
  fullName: Tide.Ork.Repo.IKeyIdManager.Exist
- uid: System.Guid
  commentId: T:System.Guid
  parent: System
  isExternal: true
  name: Guid
  nameWithType: Guid
  fullName: System.Guid
- uid: System.Threading.Tasks.Task{System.Boolean}
  commentId: T:System.Threading.Tasks.Task{System.Boolean}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<Boolean>
  nameWithType: Task<Boolean>
  fullName: System.Threading.Tasks.Task<System.Boolean>
  nameWithType.vb: Task(Of Boolean)
  fullName.vb: System.Threading.Tasks.Task(Of System.Boolean)
  name.vb: Task(Of Boolean)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: System.Threading.Tasks.Task`1
  commentId: T:System.Threading.Tasks.Task`1
  isExternal: true
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
  nameWithType.vb: Task(Of TResult)
  fullName.vb: System.Threading.Tasks.Task(Of TResult)
  name.vb: Task(Of TResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks
  commentId: N:System.Threading.Tasks
  isExternal: true
  name: System.Threading.Tasks
  nameWithType: System.Threading.Tasks
  fullName: System.Threading.Tasks
- uid: Tide.Ork.Repo.IKeyIdManager.GetById*
  commentId: Overload:Tide.Ork.Repo.IKeyIdManager.GetById
  name: GetById
  nameWithType: IKeyIdManager.GetById
  fullName: Tide.Ork.Repo.IKeyIdManager.GetById
- uid: System.Threading.Tasks.Task{Tide.Core.KeyIdVault}
  commentId: T:System.Threading.Tasks.Task{Tide.Core.KeyIdVault}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<KeyIdVault>
  nameWithType: Task<KeyIdVault>
  fullName: System.Threading.Tasks.Task<Tide.Core.KeyIdVault>
  nameWithType.vb: Task(Of KeyIdVault)
  fullName.vb: System.Threading.Tasks.Task(Of Tide.Core.KeyIdVault)
  name.vb: Task(Of KeyIdVault)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Tide.Core.KeyIdVault
    name: KeyIdVault
    nameWithType: KeyIdVault
    fullName: Tide.Core.KeyIdVault
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Tide.Core.KeyIdVault
    name: KeyIdVault
    nameWithType: KeyIdVault
    fullName: Tide.Core.KeyIdVault
  - name: )
    nameWithType: )
    fullName: )
- uid: Tide.Ork.Repo.IKeyIdManager.GetAll*
  commentId: Overload:Tide.Ork.Repo.IKeyIdManager.GetAll
  name: GetAll
  nameWithType: IKeyIdManager.GetAll
  fullName: Tide.Ork.Repo.IKeyIdManager.GetAll
- uid: System.Threading.Tasks.Task{System.Collections.Generic.List{Tide.Core.KeyIdVault}}
  commentId: T:System.Threading.Tasks.Task{System.Collections.Generic.List{Tide.Core.KeyIdVault}}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<List<KeyIdVault>>
  nameWithType: Task<List<KeyIdVault>>
  fullName: System.Threading.Tasks.Task<System.Collections.Generic.List<Tide.Core.KeyIdVault>>
  nameWithType.vb: Task(Of List(Of KeyIdVault))
  fullName.vb: System.Threading.Tasks.Task(Of System.Collections.Generic.List(Of Tide.Core.KeyIdVault))
  name.vb: Task(Of List(Of KeyIdVault))
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Tide.Core.KeyIdVault
    name: KeyIdVault
    nameWithType: KeyIdVault
    fullName: Tide.Core.KeyIdVault
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Tide.Core.KeyIdVault
    name: KeyIdVault
    nameWithType: KeyIdVault
    fullName: Tide.Core.KeyIdVault
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Tide.Ork.Repo.IKeyIdManager.SetOrUpdate*
  commentId: Overload:Tide.Ork.Repo.IKeyIdManager.SetOrUpdate
  name: SetOrUpdate
  nameWithType: IKeyIdManager.SetOrUpdate
  fullName: Tide.Ork.Repo.IKeyIdManager.SetOrUpdate
- uid: Tide.Core.KeyIdVault
  commentId: T:Tide.Core.KeyIdVault
  parent: Tide.Core
  name: KeyIdVault
  nameWithType: KeyIdVault
  fullName: Tide.Core.KeyIdVault
- uid: System.Threading.Tasks.Task{Tide.Core.TideResponse}
  commentId: T:System.Threading.Tasks.Task{Tide.Core.TideResponse}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<TideResponse>
  nameWithType: Task<TideResponse>
  fullName: System.Threading.Tasks.Task<Tide.Core.TideResponse>
  nameWithType.vb: Task(Of TideResponse)
  fullName.vb: System.Threading.Tasks.Task(Of Tide.Core.TideResponse)
  name.vb: Task(Of TideResponse)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Tide.Core.TideResponse
    name: TideResponse
    nameWithType: TideResponse
    fullName: Tide.Core.TideResponse
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Tide.Core.TideResponse
    name: TideResponse
    nameWithType: TideResponse
    fullName: Tide.Core.TideResponse
  - name: )
    nameWithType: )
    fullName: )
- uid: Tide.Core
  commentId: N:Tide.Core
  name: Tide.Core
  nameWithType: Tide.Core
  fullName: Tide.Core
- uid: Tide.Ork.Repo.IKeyIdManager.Delete*
  commentId: Overload:Tide.Ork.Repo.IKeyIdManager.Delete
  name: Delete
  nameWithType: IKeyIdManager.Delete
  fullName: Tide.Ork.Repo.IKeyIdManager.Delete
- uid: System.Threading.Tasks.Task
  commentId: T:System.Threading.Tasks.Task
  parent: System.Threading.Tasks
  isExternal: true
  name: Task
  nameWithType: Task
  fullName: System.Threading.Tasks.Task
