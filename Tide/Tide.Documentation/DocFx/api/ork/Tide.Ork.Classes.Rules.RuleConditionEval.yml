### YamlMime:ManagedReference
items:
- uid: Tide.Ork.Classes.Rules.RuleConditionEval
  commentId: T:Tide.Ork.Classes.Rules.RuleConditionEval
  id: RuleConditionEval
  parent: Tide.Ork.Classes.Rules
  children:
  - Tide.Ork.Classes.Rules.RuleConditionEval.#ctor(System.Collections.Generic.List{Tide.Core.RuleCondition})
  - Tide.Ork.Classes.Rules.RuleConditionEval.#ctor(System.String)
  - Tide.Ork.Classes.Rules.RuleConditionEval.#ctor(Tide.Core.RuleVault)
  - Tide.Ork.Classes.Rules.RuleConditionEval.Eval
  - Tide.Ork.Classes.Rules.RuleConditionEval.Run
  langs:
  - csharp
  - vb
  name: RuleConditionEval
  nameWithType: RuleConditionEval
  fullName: Tide.Ork.Classes.Rules.RuleConditionEval
  type: Class
  source:
    remote:
      path: Tide/Tide.Ork/Classes/Rules/ExpressionEval.cs
      branch: master
      repo: https://github.com/tide-foundation/Tide-Protocol.git
    id: RuleConditionEval
    path: ../../Tide.Ork/Classes/Rules/ExpressionEval.cs
    startLine: 11
  assemblies:
  - Tide.Ork
  namespace: Tide.Ork.Classes.Rules
  syntax:
    content: public class RuleConditionEval
    content.vb: Public Class RuleConditionEval
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Tide.Ork.Classes.Rules.RuleConditionEval.#ctor(System.String)
  commentId: M:Tide.Ork.Classes.Rules.RuleConditionEval.#ctor(System.String)
  id: '#ctor(System.String)'
  parent: Tide.Ork.Classes.Rules.RuleConditionEval
  langs:
  - csharp
  - vb
  name: RuleConditionEval(String)
  nameWithType: RuleConditionEval.RuleConditionEval(String)
  fullName: Tide.Ork.Classes.Rules.RuleConditionEval.RuleConditionEval(System.String)
  type: Constructor
  source:
    remote:
      path: Tide/Tide.Ork/Classes/Rules/ExpressionEval.cs
      branch: master
      repo: https://github.com/tide-foundation/Tide-Protocol.git
    id: .ctor
    path: ../../Tide.Ork/Classes/Rules/ExpressionEval.cs
    startLine: 15
  assemblies:
  - Tide.Ork
  namespace: Tide.Ork.Classes.Rules
  syntax:
    content: public RuleConditionEval(string query)
    parameters:
    - id: query
      type: System.String
    content.vb: Public Sub New(query As String)
  overload: Tide.Ork.Classes.Rules.RuleConditionEval.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Tide.Ork.Classes.Rules.RuleConditionEval.#ctor(System.Collections.Generic.List{Tide.Core.RuleCondition})
  commentId: M:Tide.Ork.Classes.Rules.RuleConditionEval.#ctor(System.Collections.Generic.List{Tide.Core.RuleCondition})
  id: '#ctor(System.Collections.Generic.List{Tide.Core.RuleCondition})'
  parent: Tide.Ork.Classes.Rules.RuleConditionEval
  langs:
  - csharp
  - vb
  name: RuleConditionEval(List<RuleCondition>)
  nameWithType: RuleConditionEval.RuleConditionEval(List<RuleCondition>)
  fullName: Tide.Ork.Classes.Rules.RuleConditionEval.RuleConditionEval(System.Collections.Generic.List<Tide.Core.RuleCondition>)
  type: Constructor
  source:
    remote:
      path: Tide/Tide.Ork/Classes/Rules/ExpressionEval.cs
      branch: master
      repo: https://github.com/tide-foundation/Tide-Protocol.git
    id: .ctor
    path: ../../Tide.Ork/Classes/Rules/ExpressionEval.cs
    startLine: 20
  assemblies:
  - Tide.Ork
  namespace: Tide.Ork.Classes.Rules
  syntax:
    content: public RuleConditionEval(List<RuleCondition> conditions)
    parameters:
    - id: conditions
      type: System.Collections.Generic.List{Tide.Core.RuleCondition}
    content.vb: Public Sub New(conditions As List(Of RuleCondition))
  overload: Tide.Ork.Classes.Rules.RuleConditionEval.#ctor*
  nameWithType.vb: RuleConditionEval.RuleConditionEval(List(Of RuleCondition))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Tide.Ork.Classes.Rules.RuleConditionEval.RuleConditionEval(System.Collections.Generic.List(Of Tide.Core.RuleCondition))
  name.vb: RuleConditionEval(List(Of RuleCondition))
- uid: Tide.Ork.Classes.Rules.RuleConditionEval.#ctor(Tide.Core.RuleVault)
  commentId: M:Tide.Ork.Classes.Rules.RuleConditionEval.#ctor(Tide.Core.RuleVault)
  id: '#ctor(Tide.Core.RuleVault)'
  parent: Tide.Ork.Classes.Rules.RuleConditionEval
  langs:
  - csharp
  - vb
  name: RuleConditionEval(RuleVault)
  nameWithType: RuleConditionEval.RuleConditionEval(RuleVault)
  fullName: Tide.Ork.Classes.Rules.RuleConditionEval.RuleConditionEval(Tide.Core.RuleVault)
  type: Constructor
  source:
    remote:
      path: Tide/Tide.Ork/Classes/Rules/ExpressionEval.cs
      branch: master
      repo: https://github.com/tide-foundation/Tide-Protocol.git
    id: .ctor
    path: ../../Tide.Ork/Classes/Rules/ExpressionEval.cs
    startLine: 25
  assemblies:
  - Tide.Ork
  namespace: Tide.Ork.Classes.Rules
  syntax:
    content: public RuleConditionEval(RuleVault rule)
    parameters:
    - id: rule
      type: Tide.Core.RuleVault
    content.vb: Public Sub New(rule As RuleVault)
  overload: Tide.Ork.Classes.Rules.RuleConditionEval.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Tide.Ork.Classes.Rules.RuleConditionEval.Run
  commentId: M:Tide.Ork.Classes.Rules.RuleConditionEval.Run
  id: Run
  parent: Tide.Ork.Classes.Rules.RuleConditionEval
  langs:
  - csharp
  - vb
  name: Run()
  nameWithType: RuleConditionEval.Run()
  fullName: Tide.Ork.Classes.Rules.RuleConditionEval.Run()
  type: Method
  source:
    remote:
      path: Tide/Tide.Ork/Classes/Rules/ExpressionEval.cs
      branch: master
      repo: https://github.com/tide-foundation/Tide-Protocol.git
    id: Run
    path: ../../Tide.Ork/Classes/Rules/ExpressionEval.cs
    startLine: 60
  assemblies:
  - Tide.Ork
  namespace: Tide.Ork.Classes.Rules
  syntax:
    content: public bool Run()
    return:
      type: System.Boolean
    content.vb: Public Function Run As Boolean
  overload: Tide.Ork.Classes.Rules.RuleConditionEval.Run*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Tide.Ork.Classes.Rules.RuleConditionEval.Eval
  commentId: M:Tide.Ork.Classes.Rules.RuleConditionEval.Eval
  id: Eval
  parent: Tide.Ork.Classes.Rules.RuleConditionEval
  langs:
  - csharp
  - vb
  name: Eval()
  nameWithType: RuleConditionEval.Eval()
  fullName: Tide.Ork.Classes.Rules.RuleConditionEval.Eval()
  type: Method
  source:
    remote:
      path: Tide/Tide.Ork/Classes/Rules/ExpressionEval.cs
      branch: master
      repo: https://github.com/tide-foundation/Tide-Protocol.git
    id: Eval
    path: ../../Tide.Ork/Classes/Rules/ExpressionEval.cs
    startLine: 62
  assemblies:
  - Tide.Ork
  namespace: Tide.Ork.Classes.Rules
  syntax:
    content: public Expression<Func<bool>> Eval()
    return:
      type: System.Linq.Expressions.Expression{System.Func{System.Boolean}}
    content.vb: Public Function Eval As Expression(Of Func(Of Boolean))
  overload: Tide.Ork.Classes.Rules.RuleConditionEval.Eval*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: Tide.Ork.Classes.Rules
  commentId: N:Tide.Ork.Classes.Rules
  name: Tide.Ork.Classes.Rules
  nameWithType: Tide.Ork.Classes.Rules
  fullName: Tide.Ork.Classes.Rules
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Tide.Ork.Classes.Rules.RuleConditionEval.#ctor*
  commentId: Overload:Tide.Ork.Classes.Rules.RuleConditionEval.#ctor
  name: RuleConditionEval
  nameWithType: RuleConditionEval.RuleConditionEval
  fullName: Tide.Ork.Classes.Rules.RuleConditionEval.RuleConditionEval
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Collections.Generic.List{Tide.Core.RuleCondition}
  commentId: T:System.Collections.Generic.List{Tide.Core.RuleCondition}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  name: List<RuleCondition>
  nameWithType: List<RuleCondition>
  fullName: System.Collections.Generic.List<Tide.Core.RuleCondition>
  nameWithType.vb: List(Of RuleCondition)
  fullName.vb: System.Collections.Generic.List(Of Tide.Core.RuleCondition)
  name.vb: List(Of RuleCondition)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Tide.Core.RuleCondition
    name: RuleCondition
    nameWithType: RuleCondition
    fullName: Tide.Core.RuleCondition
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Tide.Core.RuleCondition
    name: RuleCondition
    nameWithType: RuleCondition
    fullName: Tide.Core.RuleCondition
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1
  commentId: T:System.Collections.Generic.List`1
  isExternal: true
  name: List<T>
  nameWithType: List<T>
  fullName: System.Collections.Generic.List<T>
  nameWithType.vb: List(Of T)
  fullName.vb: System.Collections.Generic.List(Of T)
  name.vb: List(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: Tide.Core.RuleVault
  commentId: T:Tide.Core.RuleVault
  parent: Tide.Core
  name: RuleVault
  nameWithType: RuleVault
  fullName: Tide.Core.RuleVault
- uid: Tide.Core
  commentId: N:Tide.Core
  name: Tide.Core
  nameWithType: Tide.Core
  fullName: Tide.Core
- uid: Tide.Ork.Classes.Rules.RuleConditionEval.Run*
  commentId: Overload:Tide.Ork.Classes.Rules.RuleConditionEval.Run
  name: Run
  nameWithType: RuleConditionEval.Run
  fullName: Tide.Ork.Classes.Rules.RuleConditionEval.Run
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: Tide.Ork.Classes.Rules.RuleConditionEval.Eval*
  commentId: Overload:Tide.Ork.Classes.Rules.RuleConditionEval.Eval
  name: Eval
  nameWithType: RuleConditionEval.Eval
  fullName: Tide.Ork.Classes.Rules.RuleConditionEval.Eval
- uid: System.Linq.Expressions.Expression{System.Func{System.Boolean}}
  commentId: T:System.Linq.Expressions.Expression{System.Func{System.Boolean}}
  parent: System.Linq.Expressions
  definition: System.Linq.Expressions.Expression`1
  name: Expression<Func<Boolean>>
  nameWithType: Expression<Func<Boolean>>
  fullName: System.Linq.Expressions.Expression<System.Func<System.Boolean>>
  nameWithType.vb: Expression(Of Func(Of Boolean))
  fullName.vb: System.Linq.Expressions.Expression(Of System.Func(Of System.Boolean))
  name.vb: Expression(Of Func(Of Boolean))
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Linq.Expressions.Expression`1
  commentId: T:System.Linq.Expressions.Expression`1
  isExternal: true
  name: Expression<TDelegate>
  nameWithType: Expression<TDelegate>
  fullName: System.Linq.Expressions.Expression<TDelegate>
  nameWithType.vb: Expression(Of TDelegate)
  fullName.vb: System.Linq.Expressions.Expression(Of TDelegate)
  name.vb: Expression(Of TDelegate)
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TDelegate
    nameWithType: TDelegate
    fullName: TDelegate
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TDelegate
    nameWithType: TDelegate
    fullName: TDelegate
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Linq.Expressions
  commentId: N:System.Linq.Expressions
  isExternal: true
  name: System.Linq.Expressions
  nameWithType: System.Linq.Expressions
  fullName: System.Linq.Expressions
