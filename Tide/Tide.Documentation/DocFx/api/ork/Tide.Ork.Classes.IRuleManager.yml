### YamlMime:ManagedReference
items:
- uid: Tide.Ork.Classes.IRuleManager
  commentId: T:Tide.Ork.Classes.IRuleManager
  id: IRuleManager
  parent: Tide.Ork.Classes
  children:
  - Tide.Ork.Classes.IRuleManager.GetSetByOwner(System.Guid)
  langs:
  - csharp
  - vb
  name: IRuleManager
  nameWithType: IRuleManager
  fullName: Tide.Ork.Classes.IRuleManager
  type: Interface
  source:
    remote:
      path: Tide/Tide.Ork/Classes/IRuleManager.cs
      branch: master
      repo: https://github.com/tide-foundation/Tide-Protocol.git
    id: IRuleManager
    path: ../../Tide.Ork/Classes/IRuleManager.cs
    startLine: 22
  assemblies:
  - Tide.Ork
  namespace: Tide.Ork.Classes
  syntax:
    content: 'public interface IRuleManager : IManager<RuleVault>'
    content.vb: >-
      Public Interface IRuleManager

          Inherits IManager(Of RuleVault)
  inheritedMembers:
  - Tide.Ork.Classes.IManager{Tide.Core.RuleVault}.Exist(System.Guid)
  - Tide.Ork.Classes.IManager{Tide.Core.RuleVault}.GetById(System.Guid)
  - Tide.Ork.Classes.IManager{Tide.Core.RuleVault}.GetAll
  - Tide.Ork.Classes.IManager{Tide.Core.RuleVault}.SetOrUpdate(Tide.Core.RuleVault)
  - Tide.Ork.Classes.IManager{Tide.Core.RuleVault}.Delete(System.Guid)
  modifiers.csharp:
  - public
  - interface
  modifiers.vb:
  - Public
  - Interface
- uid: Tide.Ork.Classes.IRuleManager.GetSetByOwner(System.Guid)
  commentId: M:Tide.Ork.Classes.IRuleManager.GetSetByOwner(System.Guid)
  id: GetSetByOwner(System.Guid)
  parent: Tide.Ork.Classes.IRuleManager
  langs:
  - csharp
  - vb
  name: GetSetByOwner(Guid)
  nameWithType: IRuleManager.GetSetByOwner(Guid)
  fullName: Tide.Ork.Classes.IRuleManager.GetSetByOwner(System.Guid)
  type: Method
  source:
    remote:
      path: Tide/Tide.Ork/Classes/IRuleManager.cs
      branch: master
      repo: https://github.com/tide-foundation/Tide-Protocol.git
    id: GetSetByOwner
    path: ../../Tide.Ork/Classes/IRuleManager.cs
    startLine: 24
  assemblies:
  - Tide.Ork
  namespace: Tide.Ork.Classes
  syntax:
    content: Task<List<RuleVault>> GetSetByOwner(Guid id)
    parameters:
    - id: id
      type: System.Guid
    return:
      type: System.Threading.Tasks.Task{System.Collections.Generic.List{Tide.Core.RuleVault}}
    content.vb: Function GetSetByOwner(id As Guid) As Task(Of List(Of RuleVault))
  overload: Tide.Ork.Classes.IRuleManager.GetSetByOwner*
references:
- uid: Tide.Ork.Classes
  commentId: N:Tide.Ork.Classes
  name: Tide.Ork.Classes
  nameWithType: Tide.Ork.Classes
  fullName: Tide.Ork.Classes
- uid: Tide.Ork.Classes.IManager{Tide.Core.RuleVault}.Exist(System.Guid)
  commentId: M:Tide.Ork.Classes.IManager{Tide.Core.RuleVault}.Exist(System.Guid)
  parent: Tide.Ork.Classes.IManager{Tide.Core.RuleVault}
  definition: Tide.Ork.Classes.IManager`1.Exist(System.Guid)
  name: Exist(Guid)
  nameWithType: IManager<RuleVault>.Exist(Guid)
  fullName: Tide.Ork.Classes.IManager<Tide.Core.RuleVault>.Exist(System.Guid)
  nameWithType.vb: IManager(Of RuleVault).Exist(Guid)
  fullName.vb: Tide.Ork.Classes.IManager(Of Tide.Core.RuleVault).Exist(System.Guid)
  spec.csharp:
  - uid: Tide.Ork.Classes.IManager`1.Exist(System.Guid)
    name: Exist
    nameWithType: IManager<RuleVault>.Exist
    fullName: Tide.Ork.Classes.IManager<Tide.Core.RuleVault>.Exist
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Guid
    name: Guid
    nameWithType: Guid
    fullName: System.Guid
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Tide.Ork.Classes.IManager`1.Exist(System.Guid)
    name: Exist
    nameWithType: IManager(Of RuleVault).Exist
    fullName: Tide.Ork.Classes.IManager(Of Tide.Core.RuleVault).Exist
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Guid
    name: Guid
    nameWithType: Guid
    fullName: System.Guid
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Tide.Ork.Classes.IManager{Tide.Core.RuleVault}.GetById(System.Guid)
  commentId: M:Tide.Ork.Classes.IManager{Tide.Core.RuleVault}.GetById(System.Guid)
  parent: Tide.Ork.Classes.IManager{Tide.Core.RuleVault}
  definition: Tide.Ork.Classes.IManager`1.GetById(System.Guid)
  name: GetById(Guid)
  nameWithType: IManager<RuleVault>.GetById(Guid)
  fullName: Tide.Ork.Classes.IManager<Tide.Core.RuleVault>.GetById(System.Guid)
  nameWithType.vb: IManager(Of RuleVault).GetById(Guid)
  fullName.vb: Tide.Ork.Classes.IManager(Of Tide.Core.RuleVault).GetById(System.Guid)
  spec.csharp:
  - uid: Tide.Ork.Classes.IManager`1.GetById(System.Guid)
    name: GetById
    nameWithType: IManager<RuleVault>.GetById
    fullName: Tide.Ork.Classes.IManager<Tide.Core.RuleVault>.GetById
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Guid
    name: Guid
    nameWithType: Guid
    fullName: System.Guid
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Tide.Ork.Classes.IManager`1.GetById(System.Guid)
    name: GetById
    nameWithType: IManager(Of RuleVault).GetById
    fullName: Tide.Ork.Classes.IManager(Of Tide.Core.RuleVault).GetById
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Guid
    name: Guid
    nameWithType: Guid
    fullName: System.Guid
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Tide.Ork.Classes.IManager{Tide.Core.RuleVault}.GetAll
  commentId: M:Tide.Ork.Classes.IManager{Tide.Core.RuleVault}.GetAll
  parent: Tide.Ork.Classes.IManager{Tide.Core.RuleVault}
  definition: Tide.Ork.Classes.IManager`1.GetAll
  name: GetAll()
  nameWithType: IManager<RuleVault>.GetAll()
  fullName: Tide.Ork.Classes.IManager<Tide.Core.RuleVault>.GetAll()
  nameWithType.vb: IManager(Of RuleVault).GetAll()
  fullName.vb: Tide.Ork.Classes.IManager(Of Tide.Core.RuleVault).GetAll()
  spec.csharp:
  - uid: Tide.Ork.Classes.IManager`1.GetAll
    name: GetAll
    nameWithType: IManager<RuleVault>.GetAll
    fullName: Tide.Ork.Classes.IManager<Tide.Core.RuleVault>.GetAll
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Tide.Ork.Classes.IManager`1.GetAll
    name: GetAll
    nameWithType: IManager(Of RuleVault).GetAll
    fullName: Tide.Ork.Classes.IManager(Of Tide.Core.RuleVault).GetAll
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Tide.Ork.Classes.IManager{Tide.Core.RuleVault}.SetOrUpdate(Tide.Core.RuleVault)
  commentId: M:Tide.Ork.Classes.IManager{Tide.Core.RuleVault}.SetOrUpdate(Tide.Core.RuleVault)
  parent: Tide.Ork.Classes.IManager{Tide.Core.RuleVault}
  definition: Tide.Ork.Classes.IManager`1.SetOrUpdate(`0)
  name: SetOrUpdate(RuleVault)
  nameWithType: IManager<RuleVault>.SetOrUpdate(RuleVault)
  fullName: Tide.Ork.Classes.IManager<Tide.Core.RuleVault>.SetOrUpdate(Tide.Core.RuleVault)
  nameWithType.vb: IManager(Of RuleVault).SetOrUpdate(RuleVault)
  fullName.vb: Tide.Ork.Classes.IManager(Of Tide.Core.RuleVault).SetOrUpdate(Tide.Core.RuleVault)
  spec.csharp:
  - uid: Tide.Ork.Classes.IManager`1.SetOrUpdate(`0)
    name: SetOrUpdate
    nameWithType: IManager<RuleVault>.SetOrUpdate
    fullName: Tide.Ork.Classes.IManager<Tide.Core.RuleVault>.SetOrUpdate
  - name: (
    nameWithType: (
    fullName: (
  - uid: Tide.Core.RuleVault
    name: RuleVault
    nameWithType: RuleVault
    fullName: Tide.Core.RuleVault
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Tide.Ork.Classes.IManager`1.SetOrUpdate(`0)
    name: SetOrUpdate
    nameWithType: IManager(Of RuleVault).SetOrUpdate
    fullName: Tide.Ork.Classes.IManager(Of Tide.Core.RuleVault).SetOrUpdate
  - name: (
    nameWithType: (
    fullName: (
  - uid: Tide.Core.RuleVault
    name: RuleVault
    nameWithType: RuleVault
    fullName: Tide.Core.RuleVault
  - name: )
    nameWithType: )
    fullName: )
- uid: Tide.Ork.Classes.IManager{Tide.Core.RuleVault}.Delete(System.Guid)
  commentId: M:Tide.Ork.Classes.IManager{Tide.Core.RuleVault}.Delete(System.Guid)
  parent: Tide.Ork.Classes.IManager{Tide.Core.RuleVault}
  definition: Tide.Ork.Classes.IManager`1.Delete(System.Guid)
  name: Delete(Guid)
  nameWithType: IManager<RuleVault>.Delete(Guid)
  fullName: Tide.Ork.Classes.IManager<Tide.Core.RuleVault>.Delete(System.Guid)
  nameWithType.vb: IManager(Of RuleVault).Delete(Guid)
  fullName.vb: Tide.Ork.Classes.IManager(Of Tide.Core.RuleVault).Delete(System.Guid)
  spec.csharp:
  - uid: Tide.Ork.Classes.IManager`1.Delete(System.Guid)
    name: Delete
    nameWithType: IManager<RuleVault>.Delete
    fullName: Tide.Ork.Classes.IManager<Tide.Core.RuleVault>.Delete
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Guid
    name: Guid
    nameWithType: Guid
    fullName: System.Guid
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Tide.Ork.Classes.IManager`1.Delete(System.Guid)
    name: Delete
    nameWithType: IManager(Of RuleVault).Delete
    fullName: Tide.Ork.Classes.IManager(Of Tide.Core.RuleVault).Delete
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Guid
    name: Guid
    nameWithType: Guid
    fullName: System.Guid
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Tide.Ork.Classes.IManager`1.Exist(System.Guid)
  commentId: M:Tide.Ork.Classes.IManager`1.Exist(System.Guid)
  isExternal: true
  name: Exist(Guid)
  nameWithType: IManager<T>.Exist(Guid)
  fullName: Tide.Ork.Classes.IManager<T>.Exist(System.Guid)
  nameWithType.vb: IManager(Of T).Exist(Guid)
  fullName.vb: Tide.Ork.Classes.IManager(Of T).Exist(System.Guid)
  spec.csharp:
  - uid: Tide.Ork.Classes.IManager`1.Exist(System.Guid)
    name: Exist
    nameWithType: IManager<T>.Exist
    fullName: Tide.Ork.Classes.IManager<T>.Exist
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Guid
    name: Guid
    nameWithType: Guid
    fullName: System.Guid
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Tide.Ork.Classes.IManager`1.Exist(System.Guid)
    name: Exist
    nameWithType: IManager(Of T).Exist
    fullName: Tide.Ork.Classes.IManager(Of T).Exist
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Guid
    name: Guid
    nameWithType: Guid
    fullName: System.Guid
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Tide.Ork.Classes.IManager{Tide.Core.RuleVault}
  commentId: T:Tide.Ork.Classes.IManager{Tide.Core.RuleVault}
  parent: Tide.Ork.Classes
  definition: Tide.Ork.Classes.IManager`1
  name: IManager<RuleVault>
  nameWithType: IManager<RuleVault>
  fullName: Tide.Ork.Classes.IManager<Tide.Core.RuleVault>
  nameWithType.vb: IManager(Of RuleVault)
  fullName.vb: Tide.Ork.Classes.IManager(Of Tide.Core.RuleVault)
  name.vb: IManager(Of RuleVault)
  spec.csharp:
  - uid: Tide.Ork.Classes.IManager`1
    name: IManager
    nameWithType: IManager
    fullName: Tide.Ork.Classes.IManager
  - name: <
    nameWithType: <
    fullName: <
  - uid: Tide.Core.RuleVault
    name: RuleVault
    nameWithType: RuleVault
    fullName: Tide.Core.RuleVault
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Tide.Ork.Classes.IManager`1
    name: IManager
    nameWithType: IManager
    fullName: Tide.Ork.Classes.IManager
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Tide.Core.RuleVault
    name: RuleVault
    nameWithType: RuleVault
    fullName: Tide.Core.RuleVault
  - name: )
    nameWithType: )
    fullName: )
- uid: Tide.Ork.Classes.IManager`1.GetById(System.Guid)
  commentId: M:Tide.Ork.Classes.IManager`1.GetById(System.Guid)
  isExternal: true
  name: GetById(Guid)
  nameWithType: IManager<T>.GetById(Guid)
  fullName: Tide.Ork.Classes.IManager<T>.GetById(System.Guid)
  nameWithType.vb: IManager(Of T).GetById(Guid)
  fullName.vb: Tide.Ork.Classes.IManager(Of T).GetById(System.Guid)
  spec.csharp:
  - uid: Tide.Ork.Classes.IManager`1.GetById(System.Guid)
    name: GetById
    nameWithType: IManager<T>.GetById
    fullName: Tide.Ork.Classes.IManager<T>.GetById
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Guid
    name: Guid
    nameWithType: Guid
    fullName: System.Guid
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Tide.Ork.Classes.IManager`1.GetById(System.Guid)
    name: GetById
    nameWithType: IManager(Of T).GetById
    fullName: Tide.Ork.Classes.IManager(Of T).GetById
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Guid
    name: Guid
    nameWithType: Guid
    fullName: System.Guid
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Tide.Ork.Classes.IManager`1.GetAll
  commentId: M:Tide.Ork.Classes.IManager`1.GetAll
  name: GetAll()
  nameWithType: IManager<T>.GetAll()
  fullName: Tide.Ork.Classes.IManager<T>.GetAll()
  nameWithType.vb: IManager(Of T).GetAll()
  fullName.vb: Tide.Ork.Classes.IManager(Of T).GetAll()
  spec.csharp:
  - uid: Tide.Ork.Classes.IManager`1.GetAll
    name: GetAll
    nameWithType: IManager<T>.GetAll
    fullName: Tide.Ork.Classes.IManager<T>.GetAll
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Tide.Ork.Classes.IManager`1.GetAll
    name: GetAll
    nameWithType: IManager(Of T).GetAll
    fullName: Tide.Ork.Classes.IManager(Of T).GetAll
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Tide.Ork.Classes.IManager`1.SetOrUpdate(`0)
  commentId: M:Tide.Ork.Classes.IManager`1.SetOrUpdate(`0)
  name: SetOrUpdate(T)
  nameWithType: IManager<T>.SetOrUpdate(T)
  fullName: Tide.Ork.Classes.IManager<T>.SetOrUpdate(T)
  nameWithType.vb: IManager(Of T).SetOrUpdate(T)
  fullName.vb: Tide.Ork.Classes.IManager(Of T).SetOrUpdate(T)
  spec.csharp:
  - uid: Tide.Ork.Classes.IManager`1.SetOrUpdate(`0)
    name: SetOrUpdate
    nameWithType: IManager<T>.SetOrUpdate
    fullName: Tide.Ork.Classes.IManager<T>.SetOrUpdate
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Tide.Ork.Classes.IManager`1.SetOrUpdate(`0)
    name: SetOrUpdate
    nameWithType: IManager(Of T).SetOrUpdate
    fullName: Tide.Ork.Classes.IManager(Of T).SetOrUpdate
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Tide.Ork.Classes.IManager`1.Delete(System.Guid)
  commentId: M:Tide.Ork.Classes.IManager`1.Delete(System.Guid)
  isExternal: true
  name: Delete(Guid)
  nameWithType: IManager<T>.Delete(Guid)
  fullName: Tide.Ork.Classes.IManager<T>.Delete(System.Guid)
  nameWithType.vb: IManager(Of T).Delete(Guid)
  fullName.vb: Tide.Ork.Classes.IManager(Of T).Delete(System.Guid)
  spec.csharp:
  - uid: Tide.Ork.Classes.IManager`1.Delete(System.Guid)
    name: Delete
    nameWithType: IManager<T>.Delete
    fullName: Tide.Ork.Classes.IManager<T>.Delete
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Guid
    name: Guid
    nameWithType: Guid
    fullName: System.Guid
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Tide.Ork.Classes.IManager`1.Delete(System.Guid)
    name: Delete
    nameWithType: IManager(Of T).Delete
    fullName: Tide.Ork.Classes.IManager(Of T).Delete
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Guid
    name: Guid
    nameWithType: Guid
    fullName: System.Guid
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Tide.Ork.Classes.IManager`1
  commentId: T:Tide.Ork.Classes.IManager`1
  name: IManager<T>
  nameWithType: IManager<T>
  fullName: Tide.Ork.Classes.IManager<T>
  nameWithType.vb: IManager(Of T)
  fullName.vb: Tide.Ork.Classes.IManager(Of T)
  name.vb: IManager(Of T)
  spec.csharp:
  - uid: Tide.Ork.Classes.IManager`1
    name: IManager
    nameWithType: IManager
    fullName: Tide.Ork.Classes.IManager
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Tide.Ork.Classes.IManager`1
    name: IManager
    nameWithType: IManager
    fullName: Tide.Ork.Classes.IManager
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Tide.Ork.Classes.IRuleManager.GetSetByOwner*
  commentId: Overload:Tide.Ork.Classes.IRuleManager.GetSetByOwner
  name: GetSetByOwner
  nameWithType: IRuleManager.GetSetByOwner
  fullName: Tide.Ork.Classes.IRuleManager.GetSetByOwner
- uid: System.Guid
  commentId: T:System.Guid
  parent: System
  isExternal: true
  name: Guid
  nameWithType: Guid
  fullName: System.Guid
- uid: System.Threading.Tasks.Task{System.Collections.Generic.List{Tide.Core.RuleVault}}
  commentId: T:System.Threading.Tasks.Task{System.Collections.Generic.List{Tide.Core.RuleVault}}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<List<RuleVault>>
  nameWithType: Task<List<RuleVault>>
  fullName: System.Threading.Tasks.Task<System.Collections.Generic.List<Tide.Core.RuleVault>>
  nameWithType.vb: Task(Of List(Of RuleVault))
  fullName.vb: System.Threading.Tasks.Task(Of System.Collections.Generic.List(Of Tide.Core.RuleVault))
  name.vb: Task(Of List(Of RuleVault))
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Tide.Core.RuleVault
    name: RuleVault
    nameWithType: RuleVault
    fullName: Tide.Core.RuleVault
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Tide.Core.RuleVault
    name: RuleVault
    nameWithType: RuleVault
    fullName: Tide.Core.RuleVault
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: System.Threading.Tasks.Task`1
  commentId: T:System.Threading.Tasks.Task`1
  isExternal: true
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
  nameWithType.vb: Task(Of TResult)
  fullName.vb: System.Threading.Tasks.Task(Of TResult)
  name.vb: Task(Of TResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks
  commentId: N:System.Threading.Tasks
  isExternal: true
  name: System.Threading.Tasks
  nameWithType: System.Threading.Tasks
  fullName: System.Threading.Tasks
