### YamlMime:ManagedReference
items:
- uid: Tide.Ork.Classes.IManager`1
  commentId: T:Tide.Ork.Classes.IManager`1
  id: IManager`1
  parent: Tide.Ork.Classes
  children:
  - Tide.Ork.Classes.IManager`1.Delete(System.Guid)
  - Tide.Ork.Classes.IManager`1.Exist(System.Guid)
  - Tide.Ork.Classes.IManager`1.GetAll
  - Tide.Ork.Classes.IManager`1.GetById(System.Guid)
  - Tide.Ork.Classes.IManager`1.SetOrUpdate(`0)
  langs:
  - csharp
  - vb
  name: IManager<T>
  nameWithType: IManager<T>
  fullName: Tide.Ork.Classes.IManager<T>
  type: Interface
  source:
    remote:
      path: Tide/Tide.Ork/Classes/IManager.cs
      branch: master
      repo: https://github.com/tide-foundation/Tide-Protocol.git
    id: IManager
    path: ../../Tide.Ork/Classes/IManager.cs
    startLine: 22
  assemblies:
  - Tide.Ork
  namespace: Tide.Ork.Classes
  syntax:
    content: >-
      public interface IManager<T>

          where T : IGuid
    typeParameters:
    - id: T
    content.vb: Public Interface IManager(Of T As IGuid)
  nameWithType.vb: IManager(Of T)
  modifiers.csharp:
  - public
  - interface
  modifiers.vb:
  - Public
  - Interface
  fullName.vb: Tide.Ork.Classes.IManager(Of T)
  name.vb: IManager(Of T)
- uid: Tide.Ork.Classes.IManager`1.Exist(System.Guid)
  commentId: M:Tide.Ork.Classes.IManager`1.Exist(System.Guid)
  id: Exist(System.Guid)
  parent: Tide.Ork.Classes.IManager`1
  langs:
  - csharp
  - vb
  name: Exist(Guid)
  nameWithType: IManager<T>.Exist(Guid)
  fullName: Tide.Ork.Classes.IManager<T>.Exist(System.Guid)
  type: Method
  source:
    remote:
      path: Tide/Tide.Ork/Classes/IManager.cs
      branch: master
      repo: https://github.com/tide-foundation/Tide-Protocol.git
    id: Exist
    path: ../../Tide.Ork/Classes/IManager.cs
    startLine: 24
  assemblies:
  - Tide.Ork
  namespace: Tide.Ork.Classes
  syntax:
    content: Task<bool> Exist(Guid id)
    parameters:
    - id: id
      type: System.Guid
    return:
      type: System.Threading.Tasks.Task{System.Boolean}
    content.vb: Function Exist(id As Guid) As Task(Of Boolean)
  overload: Tide.Ork.Classes.IManager`1.Exist*
  nameWithType.vb: IManager(Of T).Exist(Guid)
  fullName.vb: Tide.Ork.Classes.IManager(Of T).Exist(System.Guid)
- uid: Tide.Ork.Classes.IManager`1.GetById(System.Guid)
  commentId: M:Tide.Ork.Classes.IManager`1.GetById(System.Guid)
  id: GetById(System.Guid)
  parent: Tide.Ork.Classes.IManager`1
  langs:
  - csharp
  - vb
  name: GetById(Guid)
  nameWithType: IManager<T>.GetById(Guid)
  fullName: Tide.Ork.Classes.IManager<T>.GetById(System.Guid)
  type: Method
  source:
    remote:
      path: Tide/Tide.Ork/Classes/IManager.cs
      branch: master
      repo: https://github.com/tide-foundation/Tide-Protocol.git
    id: GetById
    path: ../../Tide.Ork/Classes/IManager.cs
    startLine: 25
  assemblies:
  - Tide.Ork
  namespace: Tide.Ork.Classes
  syntax:
    content: Task<T> GetById(Guid id)
    parameters:
    - id: id
      type: System.Guid
    return:
      type: System.Threading.Tasks.Task{{T}}
    content.vb: Function GetById(id As Guid) As Task(Of T)
  overload: Tide.Ork.Classes.IManager`1.GetById*
  nameWithType.vb: IManager(Of T).GetById(Guid)
  fullName.vb: Tide.Ork.Classes.IManager(Of T).GetById(System.Guid)
- uid: Tide.Ork.Classes.IManager`1.GetAll
  commentId: M:Tide.Ork.Classes.IManager`1.GetAll
  id: GetAll
  parent: Tide.Ork.Classes.IManager`1
  langs:
  - csharp
  - vb
  name: GetAll()
  nameWithType: IManager<T>.GetAll()
  fullName: Tide.Ork.Classes.IManager<T>.GetAll()
  type: Method
  source:
    remote:
      path: Tide/Tide.Ork/Classes/IManager.cs
      branch: master
      repo: https://github.com/tide-foundation/Tide-Protocol.git
    id: GetAll
    path: ../../Tide.Ork/Classes/IManager.cs
    startLine: 26
  assemblies:
  - Tide.Ork
  namespace: Tide.Ork.Classes
  syntax:
    content: Task<List<T>> GetAll()
    return:
      type: System.Threading.Tasks.Task{System.Collections.Generic.List{{T}}}
    content.vb: Function GetAll As Task(Of List(Of T))
  overload: Tide.Ork.Classes.IManager`1.GetAll*
  nameWithType.vb: IManager(Of T).GetAll()
  fullName.vb: Tide.Ork.Classes.IManager(Of T).GetAll()
- uid: Tide.Ork.Classes.IManager`1.SetOrUpdate(`0)
  commentId: M:Tide.Ork.Classes.IManager`1.SetOrUpdate(`0)
  id: SetOrUpdate(`0)
  parent: Tide.Ork.Classes.IManager`1
  langs:
  - csharp
  - vb
  name: SetOrUpdate(T)
  nameWithType: IManager<T>.SetOrUpdate(T)
  fullName: Tide.Ork.Classes.IManager<T>.SetOrUpdate(T)
  type: Method
  source:
    remote:
      path: Tide/Tide.Ork/Classes/IManager.cs
      branch: master
      repo: https://github.com/tide-foundation/Tide-Protocol.git
    id: SetOrUpdate
    path: ../../Tide.Ork/Classes/IManager.cs
    startLine: 27
  assemblies:
  - Tide.Ork
  namespace: Tide.Ork.Classes
  syntax:
    content: Task<TideResponse> SetOrUpdate(T entity)
    parameters:
    - id: entity
      type: '{T}'
    return:
      type: System.Threading.Tasks.Task{Tide.Core.TideResponse}
    content.vb: Function SetOrUpdate(entity As T) As Task(Of TideResponse)
  overload: Tide.Ork.Classes.IManager`1.SetOrUpdate*
  nameWithType.vb: IManager(Of T).SetOrUpdate(T)
  fullName.vb: Tide.Ork.Classes.IManager(Of T).SetOrUpdate(T)
- uid: Tide.Ork.Classes.IManager`1.Delete(System.Guid)
  commentId: M:Tide.Ork.Classes.IManager`1.Delete(System.Guid)
  id: Delete(System.Guid)
  parent: Tide.Ork.Classes.IManager`1
  langs:
  - csharp
  - vb
  name: Delete(Guid)
  nameWithType: IManager<T>.Delete(Guid)
  fullName: Tide.Ork.Classes.IManager<T>.Delete(System.Guid)
  type: Method
  source:
    remote:
      path: Tide/Tide.Ork/Classes/IManager.cs
      branch: master
      repo: https://github.com/tide-foundation/Tide-Protocol.git
    id: Delete
    path: ../../Tide.Ork/Classes/IManager.cs
    startLine: 28
  assemblies:
  - Tide.Ork
  namespace: Tide.Ork.Classes
  syntax:
    content: Task Delete(Guid id)
    parameters:
    - id: id
      type: System.Guid
    return:
      type: System.Threading.Tasks.Task
    content.vb: Function Delete(id As Guid) As Task
  overload: Tide.Ork.Classes.IManager`1.Delete*
  nameWithType.vb: IManager(Of T).Delete(Guid)
  fullName.vb: Tide.Ork.Classes.IManager(Of T).Delete(System.Guid)
references:
- uid: Tide.Ork.Classes
  commentId: N:Tide.Ork.Classes
  name: Tide.Ork.Classes
  nameWithType: Tide.Ork.Classes
  fullName: Tide.Ork.Classes
- uid: Tide.Ork.Classes.IManager`1.Exist*
  commentId: Overload:Tide.Ork.Classes.IManager`1.Exist
  name: Exist
  nameWithType: IManager<T>.Exist
  fullName: Tide.Ork.Classes.IManager<T>.Exist
  nameWithType.vb: IManager(Of T).Exist
  fullName.vb: Tide.Ork.Classes.IManager(Of T).Exist
- uid: System.Guid
  commentId: T:System.Guid
  parent: System
  isExternal: true
  name: Guid
  nameWithType: Guid
  fullName: System.Guid
- uid: System.Threading.Tasks.Task{System.Boolean}
  commentId: T:System.Threading.Tasks.Task{System.Boolean}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<Boolean>
  nameWithType: Task<Boolean>
  fullName: System.Threading.Tasks.Task<System.Boolean>
  nameWithType.vb: Task(Of Boolean)
  fullName.vb: System.Threading.Tasks.Task(Of System.Boolean)
  name.vb: Task(Of Boolean)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: System.Threading.Tasks.Task`1
  commentId: T:System.Threading.Tasks.Task`1
  isExternal: true
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
  nameWithType.vb: Task(Of TResult)
  fullName.vb: System.Threading.Tasks.Task(Of TResult)
  name.vb: Task(Of TResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks
  commentId: N:System.Threading.Tasks
  isExternal: true
  name: System.Threading.Tasks
  nameWithType: System.Threading.Tasks
  fullName: System.Threading.Tasks
- uid: Tide.Ork.Classes.IManager`1.GetById*
  commentId: Overload:Tide.Ork.Classes.IManager`1.GetById
  name: GetById
  nameWithType: IManager<T>.GetById
  fullName: Tide.Ork.Classes.IManager<T>.GetById
  nameWithType.vb: IManager(Of T).GetById
  fullName.vb: Tide.Ork.Classes.IManager(Of T).GetById
- uid: System.Threading.Tasks.Task{{T}}
  commentId: T:System.Threading.Tasks.Task{`0}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<T>
  nameWithType: Task<T>
  fullName: System.Threading.Tasks.Task<T>
  nameWithType.vb: Task(Of T)
  fullName.vb: System.Threading.Tasks.Task(Of T)
  name.vb: Task(Of T)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Tide.Ork.Classes.IManager`1.GetAll*
  commentId: Overload:Tide.Ork.Classes.IManager`1.GetAll
  name: GetAll
  nameWithType: IManager<T>.GetAll
  fullName: Tide.Ork.Classes.IManager<T>.GetAll
  nameWithType.vb: IManager(Of T).GetAll
  fullName.vb: Tide.Ork.Classes.IManager(Of T).GetAll
- uid: System.Threading.Tasks.Task{System.Collections.Generic.List{{T}}}
  commentId: T:System.Threading.Tasks.Task{System.Collections.Generic.List{`0}}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<List<T>>
  nameWithType: Task<List<T>>
  fullName: System.Threading.Tasks.Task<System.Collections.Generic.List<T>>
  nameWithType.vb: Task(Of List(Of T))
  fullName.vb: System.Threading.Tasks.Task(Of System.Collections.Generic.List(Of T))
  name.vb: Task(Of List(Of T))
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Tide.Ork.Classes.IManager`1.SetOrUpdate*
  commentId: Overload:Tide.Ork.Classes.IManager`1.SetOrUpdate
  name: SetOrUpdate
  nameWithType: IManager<T>.SetOrUpdate
  fullName: Tide.Ork.Classes.IManager<T>.SetOrUpdate
  nameWithType.vb: IManager(Of T).SetOrUpdate
  fullName.vb: Tide.Ork.Classes.IManager(Of T).SetOrUpdate
- uid: '{T}'
  commentId: '!:T'
  definition: T
  name: T
  nameWithType: T
  fullName: T
- uid: System.Threading.Tasks.Task{Tide.Core.TideResponse}
  commentId: T:System.Threading.Tasks.Task{Tide.Core.TideResponse}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<TideResponse>
  nameWithType: Task<TideResponse>
  fullName: System.Threading.Tasks.Task<Tide.Core.TideResponse>
  nameWithType.vb: Task(Of TideResponse)
  fullName.vb: System.Threading.Tasks.Task(Of Tide.Core.TideResponse)
  name.vb: Task(Of TideResponse)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Tide.Core.TideResponse
    name: TideResponse
    nameWithType: TideResponse
    fullName: Tide.Core.TideResponse
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Tide.Core.TideResponse
    name: TideResponse
    nameWithType: TideResponse
    fullName: Tide.Core.TideResponse
  - name: )
    nameWithType: )
    fullName: )
- uid: T
  name: T
  nameWithType: T
  fullName: T
- uid: Tide.Ork.Classes.IManager`1.Delete*
  commentId: Overload:Tide.Ork.Classes.IManager`1.Delete
  name: Delete
  nameWithType: IManager<T>.Delete
  fullName: Tide.Ork.Classes.IManager<T>.Delete
  nameWithType.vb: IManager(Of T).Delete
  fullName.vb: Tide.Ork.Classes.IManager(Of T).Delete
- uid: System.Threading.Tasks.Task
  commentId: T:System.Threading.Tasks.Task
  parent: System.Threading.Tasks
  isExternal: true
  name: Task
  nameWithType: Task
  fullName: System.Threading.Tasks.Task
